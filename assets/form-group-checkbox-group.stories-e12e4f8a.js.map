{"version":3,"file":"form-group-checkbox-group.stories-e12e4f8a.js","sources":["../../src/design-system/components/molecules/form-group/stories/form-group-checkbox-group.stories.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\nimport { FormGroup } from '../form-group';\nimport { useState } from 'react';\nimport { CheckboxGroup } from '../..';\nimport { TypeInputs } from '../../checkbox-group/checkbox-group';\nimport { CheckboxGroupStory } from '../../checkbox-group/checkbox-group.stories';\nexport default ({\n  title: 'Design System/Molecules/FormGroup/CheckboxGroup',\n  component: FormGroup\n} as ComponentMeta<typeof FormGroup>);\nconst FormGroupStory: ComponentStory<typeof FormGroup> = (args, context) => {\n  const [checkboxes, setCheckboxes] = useState<Array<TypeInputs>>(CheckboxGroupStory.args.inputs.map((checkbox: any) => {\n    return {\n      ...checkbox,\n      onChange: onChangeCheckbox\n    };\n  }));\n  function onChangeCheckbox(e: React.FormEvent<HTMLInputElement>) {\n    const value = e.currentTarget.value;\n    const checked = e.currentTarget.checked;\n    setCheckboxes((prevCheckboxes: Array<TypeInputs>) => {\n      return prevCheckboxes.map((checkbox: TypeInputs) => {\n        return {\n          ...checkbox,\n          checked: checkbox.value === value ? checked : checkbox.checked\n        };\n      });\n    });\n  }\n  const disabled = context.story.includes('Disabled');\n  useEffect(() => {\n    if (disabled) {\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\n        return prevCheckbox.map((checkbox: TypeInputs) => {\n          return {\n            ...checkbox,\n            disabled: true\n          };\n        });\n      });\n    }\n    if (args.errorText) {\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\n        return prevCheckbox.map((checkbox: TypeInputs) => {\n          return {\n            ...checkbox,\n            isErroneous: true\n          };\n        });\n      });\n    }\n  }, [disabled, args.errorText]);\n  return <>\n      <div style={{\n      margin: '0 0 2rem 0',\n      maxWidth: '616px'\n    }}>\n        <FormGroup {...args} formElementId={checkboxes[0].id}>\n          {<CheckboxGroup inputs={checkboxes} />}\n        </FormGroup>\n      </div>\n    </>;\n};\nconst formGroupArgs = {\n  label: 'Välj storlek på popkorn',\n  helperText: 'Välj en storlek som passar dig eller ditt sällskap',\n  requiredText: '(Obligatorisk)'\n};\nexport const FormGroupCheckboxGroupStory = FormGroupStory.bind({});\nFormGroupCheckboxGroupStory.storyName = 'Form Group with Checkbox Group';\nFormGroupCheckboxGroupStory.args = {\n  ...formGroupArgs\n};\nexport const FormGroupCheckboxGroupStoryError = FormGroupStory.bind({});\nFormGroupCheckboxGroupStoryError.storyName = 'Form Group with Checkbox Group Error';\nFormGroupCheckboxGroupStoryError.args = {\n  ...formGroupArgs,\n  errorText: 'Du behöver välja en storlek'\n};\nexport const FormGroupCheckboxGroupStoryDisabled = FormGroupStory.bind({});\nFormGroupCheckboxGroupStoryDisabled.storyName = 'Form Group with Checkbox Group Disabled';\nFormGroupCheckboxGroupStoryDisabled.args = {\n  ...formGroupArgs\n};\nexport const FormGroupCheckboxGroupStoryRightLabelText = FormGroupStory.bind({});\nFormGroupCheckboxGroupStoryRightLabelText.storyName = 'Form Group with Checkbox Group Label Right Text';\nFormGroupCheckboxGroupStoryRightLabelText.args = {\n  ...formGroupArgs,\n  requiredText: '',\n  labelRightText: <a href=\"/\">Se fler menyer</a>\n};\nFormGroupCheckboxGroupStory.parameters = {\n  ...FormGroupCheckboxGroupStory.parameters,\n  docs: {\n    ...FormGroupCheckboxGroupStory.parameters?.docs,\n    source: {\n      originalSource: \"(args, context) => {\\n  const [checkboxes, setCheckboxes] = useState<Array<TypeInputs>>(CheckboxGroupStory.args.inputs.map((checkbox: any) => {\\n    return {\\n      ...checkbox,\\n      onChange: onChangeCheckbox\\n    };\\n  }));\\n  function onChangeCheckbox(e: React.FormEvent<HTMLInputElement>) {\\n    const value = e.currentTarget.value;\\n    const checked = e.currentTarget.checked;\\n    setCheckboxes((prevCheckboxes: Array<TypeInputs>) => {\\n      return prevCheckboxes.map((checkbox: TypeInputs) => {\\n        return {\\n          ...checkbox,\\n          checked: checkbox.value === value ? checked : checkbox.checked\\n        };\\n      });\\n    });\\n  }\\n  const disabled = context.story.includes('Disabled');\\n  useEffect(() => {\\n    if (disabled) {\\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\\n        return prevCheckbox.map((checkbox: TypeInputs) => {\\n          return {\\n            ...checkbox,\\n            disabled: true\\n          };\\n        });\\n      });\\n    }\\n    if (args.errorText) {\\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\\n        return prevCheckbox.map((checkbox: TypeInputs) => {\\n          return {\\n            ...checkbox,\\n            isErroneous: true\\n          };\\n        });\\n      });\\n    }\\n  }, [disabled, args.errorText]);\\n  return <>\\n      <div style={{\\n      margin: '0 0 2rem 0',\\n      maxWidth: '616px'\\n    }}>\\n        <FormGroup {...args} formElementId={checkboxes[0].id}>\\n          {<CheckboxGroup inputs={checkboxes} />}\\n        </FormGroup>\\n      </div>\\n    </>;\\n}\",\n      ...FormGroupCheckboxGroupStory.parameters?.docs?.source\n    }\n  }\n};\nFormGroupCheckboxGroupStoryError.parameters = {\n  ...FormGroupCheckboxGroupStoryError.parameters,\n  docs: {\n    ...FormGroupCheckboxGroupStoryError.parameters?.docs,\n    source: {\n      originalSource: \"(args, context) => {\\n  const [checkboxes, setCheckboxes] = useState<Array<TypeInputs>>(CheckboxGroupStory.args.inputs.map((checkbox: any) => {\\n    return {\\n      ...checkbox,\\n      onChange: onChangeCheckbox\\n    };\\n  }));\\n  function onChangeCheckbox(e: React.FormEvent<HTMLInputElement>) {\\n    const value = e.currentTarget.value;\\n    const checked = e.currentTarget.checked;\\n    setCheckboxes((prevCheckboxes: Array<TypeInputs>) => {\\n      return prevCheckboxes.map((checkbox: TypeInputs) => {\\n        return {\\n          ...checkbox,\\n          checked: checkbox.value === value ? checked : checkbox.checked\\n        };\\n      });\\n    });\\n  }\\n  const disabled = context.story.includes('Disabled');\\n  useEffect(() => {\\n    if (disabled) {\\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\\n        return prevCheckbox.map((checkbox: TypeInputs) => {\\n          return {\\n            ...checkbox,\\n            disabled: true\\n          };\\n        });\\n      });\\n    }\\n    if (args.errorText) {\\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\\n        return prevCheckbox.map((checkbox: TypeInputs) => {\\n          return {\\n            ...checkbox,\\n            isErroneous: true\\n          };\\n        });\\n      });\\n    }\\n  }, [disabled, args.errorText]);\\n  return <>\\n      <div style={{\\n      margin: '0 0 2rem 0',\\n      maxWidth: '616px'\\n    }}>\\n        <FormGroup {...args} formElementId={checkboxes[0].id}>\\n          {<CheckboxGroup inputs={checkboxes} />}\\n        </FormGroup>\\n      </div>\\n    </>;\\n}\",\n      ...FormGroupCheckboxGroupStoryError.parameters?.docs?.source\n    }\n  }\n};\nFormGroupCheckboxGroupStoryDisabled.parameters = {\n  ...FormGroupCheckboxGroupStoryDisabled.parameters,\n  docs: {\n    ...FormGroupCheckboxGroupStoryDisabled.parameters?.docs,\n    source: {\n      originalSource: \"(args, context) => {\\n  const [checkboxes, setCheckboxes] = useState<Array<TypeInputs>>(CheckboxGroupStory.args.inputs.map((checkbox: any) => {\\n    return {\\n      ...checkbox,\\n      onChange: onChangeCheckbox\\n    };\\n  }));\\n  function onChangeCheckbox(e: React.FormEvent<HTMLInputElement>) {\\n    const value = e.currentTarget.value;\\n    const checked = e.currentTarget.checked;\\n    setCheckboxes((prevCheckboxes: Array<TypeInputs>) => {\\n      return prevCheckboxes.map((checkbox: TypeInputs) => {\\n        return {\\n          ...checkbox,\\n          checked: checkbox.value === value ? checked : checkbox.checked\\n        };\\n      });\\n    });\\n  }\\n  const disabled = context.story.includes('Disabled');\\n  useEffect(() => {\\n    if (disabled) {\\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\\n        return prevCheckbox.map((checkbox: TypeInputs) => {\\n          return {\\n            ...checkbox,\\n            disabled: true\\n          };\\n        });\\n      });\\n    }\\n    if (args.errorText) {\\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\\n        return prevCheckbox.map((checkbox: TypeInputs) => {\\n          return {\\n            ...checkbox,\\n            isErroneous: true\\n          };\\n        });\\n      });\\n    }\\n  }, [disabled, args.errorText]);\\n  return <>\\n      <div style={{\\n      margin: '0 0 2rem 0',\\n      maxWidth: '616px'\\n    }}>\\n        <FormGroup {...args} formElementId={checkboxes[0].id}>\\n          {<CheckboxGroup inputs={checkboxes} />}\\n        </FormGroup>\\n      </div>\\n    </>;\\n}\",\n      ...FormGroupCheckboxGroupStoryDisabled.parameters?.docs?.source\n    }\n  }\n};\nFormGroupCheckboxGroupStoryRightLabelText.parameters = {\n  ...FormGroupCheckboxGroupStoryRightLabelText.parameters,\n  docs: {\n    ...FormGroupCheckboxGroupStoryRightLabelText.parameters?.docs,\n    source: {\n      originalSource: \"(args, context) => {\\n  const [checkboxes, setCheckboxes] = useState<Array<TypeInputs>>(CheckboxGroupStory.args.inputs.map((checkbox: any) => {\\n    return {\\n      ...checkbox,\\n      onChange: onChangeCheckbox\\n    };\\n  }));\\n  function onChangeCheckbox(e: React.FormEvent<HTMLInputElement>) {\\n    const value = e.currentTarget.value;\\n    const checked = e.currentTarget.checked;\\n    setCheckboxes((prevCheckboxes: Array<TypeInputs>) => {\\n      return prevCheckboxes.map((checkbox: TypeInputs) => {\\n        return {\\n          ...checkbox,\\n          checked: checkbox.value === value ? checked : checkbox.checked\\n        };\\n      });\\n    });\\n  }\\n  const disabled = context.story.includes('Disabled');\\n  useEffect(() => {\\n    if (disabled) {\\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\\n        return prevCheckbox.map((checkbox: TypeInputs) => {\\n          return {\\n            ...checkbox,\\n            disabled: true\\n          };\\n        });\\n      });\\n    }\\n    if (args.errorText) {\\n      setCheckboxes((prevCheckbox: Array<TypeInputs>) => {\\n        return prevCheckbox.map((checkbox: TypeInputs) => {\\n          return {\\n            ...checkbox,\\n            isErroneous: true\\n          };\\n        });\\n      });\\n    }\\n  }, [disabled, args.errorText]);\\n  return <>\\n      <div style={{\\n      margin: '0 0 2rem 0',\\n      maxWidth: '616px'\\n    }}>\\n        <FormGroup {...args} formElementId={checkboxes[0].id}>\\n          {<CheckboxGroup inputs={checkboxes} />}\\n        </FormGroup>\\n      </div>\\n    </>;\\n}\",\n      ...FormGroupCheckboxGroupStoryRightLabelText.parameters?.docs?.source\n    }\n  }\n};"],"names":["formGroupCheckboxGroup_stories","title","component","FormGroup","FormGroupStory","args","context","checkboxes","setCheckboxes","useState","CheckboxGroupStory","inputs","map","checkbox","onChange","onChangeCheckbox","e","value","currentTarget","checked","prevCheckboxes","disabled","story","includes","useEffect","prevCheckbox","errorText","isErroneous","_Fragment","children","style","margin","maxWidth","formElementId","id","CheckboxGroup","formGroupArgs","label","helperText","requiredText","FormGroupCheckboxGroupStory","bind","storyName","FormGroupCheckboxGroupStoryError","FormGroupCheckboxGroupStoryDisabled","FormGroupCheckboxGroupStoryRightLabelText","labelRightText","href","parameters","docs","source","originalSource"],"mappings":"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"}