{"version":3,"file":"login-form.stories-ed3eaefd.js","sources":["../../src/design-system/components/organisms/login-form/login-form.tsx"],"sourcesContent":["import styles from './login-form.module.css'\nimport { Form } from '../../molecules'\nimport { Logotype, TLogotype } from '../../molecules/logotype/logotype'\nimport { useMemo } from 'react'\nimport { IButton } from '../../atoms/button/button'\nimport { validateField } from '../../molecules/form/helpers'\nimport { IFormTemplateProps, TFormFieldType } from '../../molecules/form/types'\n\ntype ILink = {\n  name: string;\n  href: string;\n}\n\nexport interface ILoginForm extends Pick<IFormTemplateProps, 'responseMessage'> {\n  title: string;\n  description?: string;\n  usernameLabel: string;\n  username?: string;\n  passwordLabel: string;\n  password?: string;\n  forgotPassword: {\n    name: string;\n    href: string;\n  };\n  primarySubmitLabel: string;\n  secondarySubmitLabel?: string;\n  offerLink?: {\n    name: string;\n    href: string;\n  };\n  errorMessage?: any;\n  usernameError?: string;\n  passwordError?: string;\n  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void;\n  onPasswordChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onUsernameChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  loading?: boolean;\n  logo: TLogotype;\n  captcha?: JSX.Element;\n  submitDisabled?: boolean;\n}\n\nconst LoginForm = ({\n  title,\n  description,\n  usernameLabel,\n  username,\n  passwordLabel,\n  password,\n  forgotPassword,\n  onSubmit,\n  primarySubmitLabel,\n  secondarySubmitLabel,\n  offerLink,\n  errorMessage,\n  usernameError,\n  passwordError,\n  onPasswordChange,\n  onUsernameChange,\n  loading,\n  logo,\n  responseMessage,\n  captcha,\n  submitDisabled\n}: ILoginForm) => {\n  const actions: IButton[] = useMemo(() => {\n    const x: IButton[] = [{\n      children: primarySubmitLabel,\n      surface: 'primary',\n      type: 'submit',\n      size: 'small',\n      disabled: submitDisabled\n    }];\n\n    if (secondarySubmitLabel) {\n      x.push({\n        children: secondarySubmitLabel,\n        surface: 'secondary',\n        type: 'button',\n        size: 'small'\n      })\n    }\n\n    return x;\n  }, [primarySubmitLabel, secondarySubmitLabel, submitDisabled])\n\n  const links: ILink[] = useMemo(() => {\n    const x: ILink[] = [];\n    \n    if (forgotPassword) {\n      x.push(forgotPassword)\n    }\n\n    if (offerLink) {\n      x.push(offerLink)\n    }\n\n    return x;\n  }, [forgotPassword, offerLink])\n\n  const fields: TFormFieldType[] = useMemo(() => [{\n    fieldType: 'input',\n    name: 'email',\n    label: usernameLabel,\n    originalValue: username ?? '',\n    type: 'text',\n    pattern: 'email',\n    onControlledChange: onUsernameChange,\n    required: true,\n    error: usernameError ?? 'Ange en korrekt e-post e.g. mail@mail.com', // TODO: store backup copy somewhere?\n    size: 'full'\n  }, {\n    fieldType: 'input',\n    name: 'password',\n    label: passwordLabel,\n    originalValue: password ?? '',\n    type: 'password',\n    pattern: 'password',\n    onControlledChange: onPasswordChange,\n    required: true,\n    error: passwordError ?? 'Lösenord måste vara minst x tecken...', // TODO: store backup copy somewhere?\n    size: 'full'\n  }], [])\n\n  return (\n    <div className={styles.loginForm}>\n      {logo && <Logotype {...logo} classNamePicture={styles.logo} />}\n      <Form\n        formTitle={title}\n        formSubtitle={description}\n        fields={fields.map(field => {\n          return ({...field, valid: validateField(field)})})}\n        loading={!!loading}\n        onControlledSubmit={onSubmit}\n        actions={actions}\n        generalErrorMessage={errorMessage}\n        links={links}\n        responseMessage={responseMessage}\n        captcha={captcha}\n      />\n    </div>\n  )\n}\n\nexport { LoginForm }\n"],"names":["LoginForm","title","description","usernameLabel","username","passwordLabel","password","forgotPassword","onSubmit","primarySubmitLabel","secondarySubmitLabel","offerLink","errorMessage","usernameError","passwordError","onPasswordChange","onUsernameChange","loading","logo","responseMessage","captcha","actions","useMemo","x","submitDisabled","links","fields","_jsxs","styles","loginForm","field"],"mappings":"iYA0CAA,EAAA,CAAA,CAAmB,MAAAC,EACjBA,YAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,SAAAA,EACAC,mBAAAA,EACAC,qBAAAA,EACAC,UAAAA,EACAC,aAAAA,EACAC,cAAAA,EACAC,cAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,KAAAA,EACAC,gBAAAA,EACAC,QAAAA,EACAC,eAAAA,CAEU,IAAA,CACV,MAAAC,EAAAC,EAAAA,QAAA,IAAA,CACE,MAAAC,EAAA,CAAA,CAAsB,SAAAd,EACVA,QAAAA,UACD,KAAA,SACH,KAAA,QACA,SAAAe,CACIA,CAAAA,EAGZ,OAAAd,GACEa,EAAAA,KAAAA,CAAO,SAAAb,EACKA,QAAAA,YACD,KAAA,SACH,KAAA,OACA,CAAA,EAIVa,CAAOA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAGTE,EAAAH,EAAAA,QAAA,IAAA,CACE,MAAAC,EAAA,CAAA,EAEA,OAAAhB,GACEgB,EAAAA,KAAAA,CAAAA,EAGFZ,GACEY,EAAAA,KAAAA,CAAAA,EAGFA,CAAOA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAGTG,EAAAJ,EAAA,QAAA,IAAA,CAAA,CAAgD,UAAA,QACnC,KAAA,QACL,MAAAnB,EACCA,cAAAA,GAAAA,GACoB,KAAA,OACrB,QAAA,QACG,mBAAAa,EACWA,SAAAA,GACV,MAAAH,GAAA,4CACc,KAAA,MAClB,EAAA,CACL,UAAA,QACU,KAAA,WACL,MAAAR,EACCA,cAAAA,GAAAA,GACoB,KAAA,WACrB,QAAA,WACG,mBAAAU,EACWA,SAAAA,GACV,MAAAD,GAAA,wCACc,KAAA,MAClB,CAAA,EAAA,CAAA,CAAA,EAGR,OAAAa,EAAA,MAAA,CACE,UAAAC,EAAA,UAAuBC,SAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CACH,GAAAX,EAAKA,iBAAAA,EAAAA,IAA+BA,CAAAA,EAAAA,EAAAA,EAAAA,CACjD,UAAAjB,EACQA,aAAAA,EACGC,OAAAA,EAAAA,IAAAA,IAEZ,CAAQ,GAAA4B,EAAIA,MAAAA,EAAAA,CAAAA,CAAiC,EAAC,EAAG,QAAA,CAAA,CAAAb,EACxCA,mBAAAA,EACST,QAAAA,EACpBa,oBAAAA,EACqBT,MAAAA,EACrBa,gBAAAA,EACAN,QAAAA,CACAC,CAAAA,CAAAA,CACA,CAAA,CAGR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}