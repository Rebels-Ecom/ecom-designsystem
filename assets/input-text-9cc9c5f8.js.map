{"version":3,"file":"input-text-9cc9c5f8.js","sources":["../../src/design-system/components/atoms/inputs/input-text/input-text.tsx"],"sourcesContent":["import React, { forwardRef } from 'react'\r\nimport cx from 'classnames'\r\nimport { getisErroneousStyle } from '../../../../../helpers/form-helper'\r\nimport { TOther } from '../../../../../types/other'\r\nimport styles from './input-text.module.css'\r\nimport { IIcon, Icon } from '../../icon/icon'\r\n\r\ntype acceptedTypes = 'text' | 'email' | 'tel' | 'password' | 'number'\r\n\r\nexport interface IInputText {\r\n  id: string\r\n  className?: string\r\n  wrapperClassName?: string\r\n  type?: acceptedTypes\r\n  value?: string\r\n  defaultValue?: string\r\n  onChange?: CallableFunction\r\n  onFocus?: CallableFunction\r\n  onBlur?: CallableFunction\r\n  placeholder?: string\r\n  disabled?: boolean\r\n  isErroneous?: boolean\r\n  required?: boolean\r\n  readonly?: boolean\r\n  other?: TOther\r\n  autocomplete?: string\r\n  iconRight?: IIcon\r\n}\r\n\r\nconst InputText = forwardRef<HTMLInputElement, IInputText>(\r\n  ({ id, className, wrapperClassName, type = 'text', value, defaultValue, isErroneous, required, readonly, onChange, onBlur, disabled, placeholder, other, autocomplete, iconRight }, ref) => {\r\n    function handleOnChange(e: React.FormEvent<HTMLInputElement>) {\r\n      if (onChange) {\r\n        onChange(e)\r\n      }\r\n    }\r\n\r\n    function handleOnBlur(e: React.FocusEvent<HTMLInputElement>) {\r\n      if (onBlur) {\r\n        onBlur(e)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={cx(styles.inputWrapper, wrapperClassName ? wrapperClassName : '')}>\r\n        {iconRight && <Icon className={styles.iconRight} icon={iconRight.icon}></Icon>}\r\n        <input\r\n          ref={ref}\r\n          type={type}\r\n          className={cx('body', styles.inputText, getisErroneousStyle(styles, isErroneous), className)}\r\n          id={id}\r\n          value={value}\r\n          defaultValue={defaultValue}\r\n          onChange={handleOnChange}\r\n          onBlur={handleOnBlur}\r\n          disabled={disabled}\r\n          placeholder={placeholder}\r\n          required={required}\r\n          readOnly={readonly}\r\n          autoComplete={autocomplete}\r\n          {...other}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport { InputText }\r\n"],"names":["InputText","forwardRef","id","className","wrapperClassName","value","defaultValue","isErroneous","required","readonly","onChange","onBlur","disabled","placeholder","other","autocomplete","ref","handleOnChange","e","handleOnBlur","_jsxs","cx","styles","iconRight","_jsx","Icon","icon","type"],"mappings":"gXA6BAA,EAAAC,EAAA,WAAA,CAAA,CACG,GAAAC,EAAEA,UAAAA,EAAIC,iBAAAA,EAAWC,KAAAA,EAAAA,OAAyB,MAAAC,EAAQA,aAAAA,EAAOC,YAAAA,EAAcC,SAAAA,EAAaC,SAAAA,EAAUC,SAAAA,EAAUC,OAAAA,EAAUC,SAAAA,EAAQC,YAAAA,EAAUC,MAAAA,EAAaC,aAAAA,EAAOC,UAAAA,CAAwB,EAAAC,IAAA,CAC/K,SAAAC,EAAAC,EAAA,CACER,GACEA,EAAAA,CAAAA,CACF,CAGF,SAAAS,EAAAD,EAAA,CACEP,GACEA,EAAAA,CAAAA,CACF,CAGF,OAAAS,EAAA,MAAA,CACE,UAAAC,EAAAC,EAAA,aAAAlB,GAAA,EAAA,EAAgF,SAAA,CAAAmB,GAAAC,EAAAC,EAAA,CAC3D,UAAAH,EAAA,UAAmBC,KAAAA,EAAAA,IAA2BG,CAAAA,EAAAA,EAAAA,QAAAA,CACjE,IAAAV,EACEA,KAAAA,EACAW,UAAAA,EAAAA,OAAAA,EAAAA,UAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAC2F,GAAAzB,EAC3FA,MAAAA,EACAG,aAAAA,EACAC,SAAAA,EACUW,OAAAA,EACFE,SAAAA,EACRP,YAAAA,EACAC,SAAAA,EACAL,SAAAA,EACUC,aAAAA,EACIM,GAAAA,CACVD,CAAAA,CAAAA,CACJ,CAAA,CAGR,CAAA"}