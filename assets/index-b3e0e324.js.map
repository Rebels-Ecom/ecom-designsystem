{"version":3,"file":"index-b3e0e324.js","sources":["../../node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","../../node_modules/framer-motion/dist/es/utils/use-force-update.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","../../node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"sourcesContent":["import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    var isMounted = useRef(false);\n    useIsomorphicLayoutEffect(function () {\n        isMounted.current = true;\n        return function () {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import { __read } from 'tslib';\nimport sync from 'framesync';\nimport { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\n\nfunction useForceUpdate() {\n    var isMounted = useIsMounted();\n    var _a = __read(useState(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];\n    var forceRender = useCallback(function () {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    var deferredForceRender = useCallback(function () { return sync.postRender(forceRender); }, [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n","import { __values } from 'tslib';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { useId } from '../../utils/use-id.mjs';\n\nvar PresenceChild = function (_a) {\n    var children = _a.children, initial = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;\n    var presenceChildren = useConstant(newChildrenMap);\n    var id = useId();\n    var context = useMemo(function () { return ({\n        id: id,\n        initial: initial,\n        isPresent: isPresent,\n        custom: custom,\n        onExitComplete: function (childId) {\n            var e_1, _a;\n            presenceChildren.set(childId, true);\n            try {\n                for (var _b = __values(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var isComplete = _c.value;\n                    if (!isComplete)\n                        return; // can stop searching when any is incomplete\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();\n        },\n        register: function (childId) {\n            presenceChildren.set(childId, false);\n            return function () { return presenceChildren.delete(childId); };\n        },\n    }); }, \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(function () {\n        presenceChildren.forEach(function (_, key) { return presenceChildren.set(key, false); });\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(function () {\n        !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());\n    }, [isPresent]);\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import { __read, __spreadArray } from 'tslib';\nimport * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport process from '../../utils/process.mjs';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\n\nvar getChildKey = function (child) { return child.key || \"\"; };\nvar isDev = process.env.NODE_ENV !== \"production\";\nfunction updateChildLookup(children, allChildren) {\n    var seenChildren = isDev ? new Set() : null;\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        if (isDev && seenChildren && seenChildren.has(key)) {\n            console.warn(\"Children of AnimatePresence require unique keys. \\\"\".concat(key, \"\\\" is a duplicate.\"));\n            seenChildren.add(key);\n        }\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var _d = __read(useForceUpdate(), 1), forceRender = _d[0];\n    var forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    var isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    var childrenToRender = filteredChildren;\n    var exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    var isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(function () {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(function () {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map(function (child) { return (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = __spreadArray([], __read(childrenToRender), false);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n"],"names":["useIsMounted","isMounted","useRef","useIsomorphicLayoutEffect","useForceUpdate","_a","__read","useState","forcedRenderCount","setForcedRenderCount","forceRender","useCallback","deferredForceRender","sync","PresenceChild","children","initial","isPresent","onExitComplete","custom","presenceAffectsLayout","presenceChildren","useConstant","newChildrenMap","id","useId","context","useMemo","childId","e_1","_b","__values","_c","isComplete","e_1_1","_","key","React.useEffect","React.createElement","PresenceContext","getChildKey","child","updateChildLookup","allChildren","onlyElements","filtered","Children","isValidElement","AnimatePresence","exitBeforeEnter","_d","forceRenderLayoutGroup","useContext","LayoutGroupContext","filteredChildren","childrenToRender","exiting","presentChildren","isInitialRender","useUnmountEffect","React.Fragment","__spreadArray","presentKeys","targetKeys","numPresent","i","insertionIndex","onExit","removeIndex","presentChild","cloneElement"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}