{"version":3,"file":"input-text-9c8d5d7a.js","sources":["../../src/design-system/components/atoms/inputs/input-text/input-text.tsx"],"sourcesContent":["import React, { forwardRef } from 'react'\r\nimport cx from 'classnames'\r\nimport { getisErroneousStyle } from '../../../../../helpers/form-helper'\r\nimport { TOther } from '../../../../../types/other'\r\nimport styles from './input-text.module.css'\r\nimport { IIcon, Icon } from '../../icon/icon'\r\n\r\ntype acceptedTypes = 'text' | 'email' | 'tel' | 'password' | 'number'\r\n\r\nexport interface IInputText {\r\n  id: string\r\n  className?: string\r\n  wrapperClassName?: string\r\n  type?: acceptedTypes\r\n  value?: string\r\n  defaultValue?: string\r\n  onChange?: CallableFunction\r\n  onFocus?: CallableFunction\r\n  onBlur?: CallableFunction\r\n  placeholder?: string\r\n  disabled?: boolean\r\n  isErroneous?: boolean\r\n  required?: boolean\r\n  readonly?: boolean\r\n  other?: TOther\r\n  autocomplete?: string\r\n  iconRight?: IIcon\r\n  min?: string\r\n  fullWidth?: boolean\r\n}\r\n\r\nconst InputText = forwardRef<HTMLInputElement, IInputText>(\r\n  (\r\n    {\r\n      id,\r\n      className,\r\n      wrapperClassName,\r\n      type = 'text',\r\n      value,\r\n      defaultValue,\r\n      isErroneous,\r\n      required,\r\n      readonly,\r\n      onChange,\r\n      onBlur,\r\n      disabled,\r\n      placeholder,\r\n      other,\r\n      autocomplete,\r\n      iconRight,\r\n      min,\r\n      fullWidth,\r\n    },\r\n    ref\r\n  ) => {\r\n    function handleOnChange(e: React.FormEvent<HTMLInputElement>) {\r\n      if (onChange) {\r\n        onChange(e)\r\n      }\r\n    }\r\n\r\n    function handleOnBlur(e: React.FocusEvent<HTMLInputElement>) {\r\n      if (onBlur) {\r\n        onBlur(e)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={cx(styles.inputWrapper, wrapperClassName ? wrapperClassName : '', fullWidth ? styles.fullWidth : '')}>\r\n        {iconRight && <Icon className={styles.iconRight} icon={iconRight.icon}></Icon>}\r\n        <input\r\n          ref={ref}\r\n          type={type}\r\n          className={cx('body', styles.inputText, getisErroneousStyle(styles, isErroneous), className)}\r\n          id={id}\r\n          value={value}\r\n          defaultValue={defaultValue}\r\n          onChange={handleOnChange}\r\n          onBlur={handleOnBlur}\r\n          disabled={disabled}\r\n          placeholder={placeholder}\r\n          required={required}\r\n          readOnly={readonly}\r\n          autoComplete={autocomplete}\r\n          min={min}\r\n          {...other}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n)\r\n\r\nexport { InputText }\r\n"],"names":["InputText","forwardRef","id","className","wrapperClassName","value","defaultValue","isErroneous","required","readonly","onChange","onBlur","disabled","placeholder","other","autocomplete","iconRight","min","ref","handleOnChange","e","handleOnBlur","_jsxs","cx","styles","fullWidth","_jsx","Icon","icon","type"],"mappings":"qZA+BAA,EAAAC,EAAA,WAAA,CAAA,CAEI,GAAAC,EACEA,UAAAA,EACAC,iBAAAA,EACAC,KAAAA,EAAAA,OACO,MAAAC,EACPA,aAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,OAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAC,MAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,IAAAA,EACAC,UAAAA,CAEF,EAAAC,IAAA,CAGA,SAAAC,EAAAC,EAAA,CACEV,GACEA,EAAAA,CAAAA,CACF,CAGF,SAAAW,EAAAD,EAAA,CACET,GACEA,EAAAA,CAAAA,CACF,CAGF,OAAAW,EAAA,MAAA,CACE,UAAAC,EAAAC,EAAA,aAAApB,GAAA,GAAAqB,EAAAD,EAAA,UAAA,EAAA,EAAmH,SAAA,CAAAR,GAAAU,EAAAC,EAAA,CAC9F,UAAAH,EAAA,UAAmBR,KAAAA,EAAAA,IAA2BY,CAAAA,EAAAA,EAAAA,QAAAA,CACjE,IAAAV,EACEA,KAAAA,EACAW,UAAAA,EAAAA,OAAAA,EAAAA,UAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAC2F,GAAA3B,EAC3FA,MAAAA,EACAG,aAAAA,EACAC,SAAAA,EACUa,OAAAA,EACFE,SAAAA,EACRT,YAAAA,EACAC,SAAAA,EACAL,SAAAA,EACUC,aAAAA,EACIM,IAAAA,EACdE,GAAAA,CACIH,CAAAA,CAAAA,CACJ,CAAA,CAGR,CAAA"}