{"version":3,"file":"form-0a707b68.js","sources":["../../src/design-system/components/molecules/form/helpers.tsx","../../src/design-system/components/molecules/form/components/input-field.tsx","../../src/design-system/components/molecules/form/form.tsx"],"sourcesContent":["import { TFormInputType, TPattern } from \"./types\";\n\nexport const validatePattern = (pattern: TPattern, val?: string) => {\n  switch(pattern) {\n    case 'email':\n      return val && isEmail(val)\n    case 'password':\n      return val && isPassword(val)\n    default:\n      // TODO: add all patterns\n      return true;\n  }\n}\n\nexport const validateField = (field: TFormInputType) => {\n  if (field.required) {\n    if (field.pattern) {\n      return !!validatePattern(field.pattern, (field.value ?? field.originalValue)) && !!(field.value ?? field.originalValue);\n    }\n    return !!(field.value ?? field.originalValue);\n  } else {\n    if (field.pattern) {\n      return !!validatePattern(field.pattern, (field.value ?? field.originalValue));\n    }\n    return true;\n  }\n}\n\nexport const isEmail = (val?: string) => {\n  const emailRegex = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n\n  return val && emailRegex.test(val);\n}\n\nexport const isPassword = (val?: string) => {\n  // const pwdRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[a-zA-Z]).{8,}$/;\n  // const pwdRegex = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/;\n  // const pwdRegex = /^((?=.*[a-z])(?=.*[A-Z])(?=.*\\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\\d)(?=.*[^A-Za-z0-9]))([A-Za-z\\d@#$%^&*\\-_+=[\\]{}|\\\\:',?/`~\"();!]|\\.(?!@)){8,16}$/;\n\n  return val && val !== '';\n  // return val && pwdRegex.test(val);\n}\n","import { FocusEventHandler, HTMLInputTypeAttribute, useCallback, useEffect, useRef } from 'react'\nimport { motion } from 'framer-motion'\nimport styles from './input-field.module.css'\nimport { IUILink, UILink } from '../../../atoms/ui-link/ui-link'\n\nexport interface IInputField {\n  name: string\n  label?: string\n  className?: string\n  // rightIcon?: React.ReactElement;\n  // leftIcon?: React.ReactElement;\n  // iconIgnoresFocus?: boolean;\n  type: HTMLInputTypeAttribute\n  value?: string | number\n  originalValue?: string\n  placeholder?: string\n  min?: number\n  max?: number\n  // rules?: IRules;\n  // serverValidatedRules?: IServerValidatedRules;\n  disabled?: boolean\n  readonly?: boolean\n  // variant?: myEpirocInputVariantsType;\n  // useClearButton?: boolean;\n  focusOnRender?: boolean\n  // hideValidationIcon?: true;\n  // disableValidationOnBlur?: true;\n  // maxLength?: number;\n  /**\n   * size of the input. big = height 48px, small = height 36px, mini = height 24px.\n   * @default \"big\" for mobile\n   * @default \"small\" for desktop\n   */\n  // size?: InputSizeType;\n  /** option to scroll to input field on focus\n   * @default mobile: true, desktop: false\n   */\n  // scrollToOnFocus?: boolean;\n  /** the unit of the inputs value, e.g: \"m\" or \"kg\". Will be suffixed to the end of the input */\n  // unit?: string;\n\n  /** opt out of errors component, which reserves space in the forms */\n  // omitErrors?: boolean;\n  maxWidth?: string\n  /** whether the input should start in a dirty state, useful when adding new inputs in runtime */\n  // startDirty?: boolean;\n  /** whether the input should start in a touched state */\n  // startTouched?: boolean;\n  onChange?: (newVal: string, name: string) => void\n  onControlledChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  onClick?: (e?: React.MouseEvent | React.KeyboardEvent) => void\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n  onInput?: (event: React.KeyboardEvent<HTMLInputElement>) => void\n  onKeyPress?: (event: React.KeyboardEvent<HTMLInputElement>) => void\n  onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void\n  required?: boolean\n  valid?: boolean\n  error?: string\n  dirty?: boolean\n  action?: IUILink\n}\n\nconst InputField = ({ onChange, onBlur, onControlledChange, ...props }: IInputField) => {\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      e.persist()\n\n      onChange?.(e.target.value, props.name)\n      onControlledChange?.(e)\n    },\n    [props.name, onChange]\n  )\n\n  const handleBlur = useCallback(\n    (e: React.FocusEvent<HTMLInputElement>) => {\n      e.persist()\n\n      onBlur?.(e)\n      onControlledChange?.(e)\n    },\n    [onBlur]\n  )\n\n  return (\n    <div className={styles.inputField}>\n      {props.label && <label className={styles.label}>{props.label}</label>}\n      <input\n        data-isinvalid={props.dirty && !props.valid}\n        type={props.type}\n        name={props.name}\n        inputMode={props.type === 'number' ? 'decimal' : undefined}\n        placeholder={props.placeholder}\n        className={styles.input}\n        step=\"any\"\n        onChange={handleChange}\n        value={props.value ?? props.originalValue}\n        min={props.min}\n        max={props.max}\n        disabled={props.disabled}\n        readOnly={props.readonly}\n        autoFocus={props.focusOnRender}\n        // onKeyPress={props.onKeyPress}\n        // onKeyDown={props.onKeyDown}\n        // onChangeCapture={handleChange}\n        // onClick={handleClick}\n        // onInput={props.onInput}\n        // onInputCapture={handleChange}\n        onBlur={handleBlur}\n        // maxLength={props.maxLength}\n      />\n      <div className={styles.errorWrapper}>\n        <motion.label\n          className={styles.error}\n          initial={{ y: '-100%', opacity: 0 }}\n          animate={props.error && !props.valid && props.dirty ? { y: 0, opacity: 1 } : { y: '-100%', opacity: 0 }}\n        >\n          {props.error}\n        </motion.label>\n      </div>\n      <div className={styles.linkWrapper}>\n        <motion.div className={styles.error} initial={{ y: '-100%', opacity: 0 }} animate={props.action ? { y: 0, opacity: 1 } : { y: '-100%', opacity: 0 }}>\n          {props.action && <UILink {...props.action} />}\n        </motion.div>\n      </div>\n    </div>\n  )\n}\n\nexport { InputField }\n","import { useCallback, useEffect, useRef, useState } from 'react'\nimport { Button, ExpandableWrapper, Heading, Text } from '../../atoms'\nimport styles from './form.module.css'\nimport { FlexContainer } from '../../layouts'\nimport { IFormTemplateProps, TFormFieldType } from './types'\nimport { InputField } from './components/input-field'\nimport { validateField } from './helpers'\nimport cx from 'classnames'\n\nconst Form = ({ onSubmit, onControlledSubmit, formTitle, formSubtitle, loading, ...props }: IFormTemplateProps) => {\n  const [fields, setFields] = useState<Array<TFormFieldType>>(props.fields)\n  const [isSubmitted, setIsSubmitted] = useState(false)\n  const [isValid, setIsValid] = useState(false)\n\n  const formRef = useRef<HTMLFormElement>(null)\n\n  useEffect(() => {\n    if (!formRef.current) {\n      return\n    }\n    const isValid = fields.some((field) => field.required && !field.valid) ? false : true\n\n    setIsValid(isValid)\n  }, [fields])\n\n  const handleSubmit = useCallback(\n    (event) => {\n      event.preventDefault()\n      onSubmit?.(fields)\n      onControlledSubmit?.(event)\n\n      setIsSubmitted(true)\n    },\n    [fields, onSubmit]\n  )\n\n  const handleChange = useCallback((value: string, fieldName: string) => {\n    const fieldToUpdate = fields.find((field) => field.name === fieldName)\n\n    if (!fieldToUpdate) {\n      return\n    }\n\n    setFields((prevFields) => {\n      const updatedFields = prevFields.map((field) => {\n        if (field.name === fieldName) {\n          return {\n            ...field,\n            dirty: true,\n            valid: validateField({ ...field, value }),\n            value,\n          }\n        } else {\n          return field\n        }\n      })\n\n      return updatedFields\n    })\n  }, [])\n\n  return (\n    <form ref={formRef} className={cx(styles.form, props.alignSubmitButtonHorizontally ? styles.formDirectionRow : '')} onSubmit={handleSubmit}>\n      <div>\n        {formTitle && (\n          <Heading order={3} className={styles.formTitle}>\n            {formTitle}\n          </Heading>\n        )}\n        {formSubtitle && <p className={styles.formSubtitle}>{formSubtitle}</p>}\n        <FlexContainer wrap>\n          {fields?.map((field, i) => {\n            return (\n              <div key={field.name} className={cx(styles.field, styles[field.size ?? 'half'])}>\n                {field.fieldType === 'input' && (\n                  <InputField\n                    {...field}\n                    value={field.value ?? field.originalValue}\n                    onChange={(val, name) => {\n                      handleChange(val, name)\n                    }}\n                    onControlledChange={(e) => {\n                      field.onControlledChange?.(e)\n                    }}\n                    focusOnRender={i === 0}\n                    readonly={field.blocked}\n                    disabled={loading}\n                  />\n                )}\n              </div>\n            )\n          })}\n        </FlexContainer>\n        <ExpandableWrapper open={!!props.generalErrorMessage}>\n          <FlexContainer alignItems=\"center\" justifyContent=\"center\">\n            {props.generalErrorMessage && <p className={styles.generalErrorMessage} dangerouslySetInnerHTML={{ __html: props.generalErrorMessage }}></p>}\n          </FlexContainer>\n        </ExpandableWrapper>\n      </div>\n      {props.actions && (\n        <FlexContainer justifyContent={props.alignActions ?? 'center'}>\n          {props.actions.map((action, i) => (\n            <Button\n              key={`${action.type}-${i}`}\n              {...action}\n              disabled={action.type === 'submit' ? !isValid : loading}\n              loading={action.type === 'submit' && loading}\n            />\n          ))}\n        </FlexContainer>\n      )}\n      {props.links && (\n        <FlexContainer justifyContent={props.alignActions ?? 'center'}>\n          {props.links.map((link, i) => (\n            <a className={styles.link} key={`${link.name}-${i}`} href={link.href} target=\"_blank\">\n              {link.name}\n            </a>\n          ))}\n        </FlexContainer>\n      )}\n    </form>\n  )\n}\n\nexport { Form }\n"],"names":["validatePattern","pattern","val","isEmail","isPassword","validateField","field","InputField","onChange","onBlur","onControlledChange","handleChange","useCallback","e","props","handleBlur","_jsxs","styles","inputField","label","valid","type","name","undefined","placeholder","input","originalValue","min","max","disabled","readonly","focusOnRender","errorWrapper","error","_jsx","linkWrapper","UILink","action","Form","onSubmit","onControlledSubmit","formTitle","formSubtitle","loading","fields","setFields","useState","isSubmitted","setIsSubmitted","isValid","setIsValid","formRef","useRef","useEffect","isValid2","handleSubmit","event","value","fieldName","prevFields","updatedFields","Heading","i","cx","blocked","ExpandableWrapper","generalErrorMessage","FlexContainer","Button","link","href"],"mappings":"iZAEO,MAAAA,EAAA,CAAAC,EAAAC,IAAA,CACL,OAAAD,EAAA,CAAc,IAAA,QAEV,OAAAC,GAAAC,EAAAD,CAAA,EAAyB,IAAA,WAEzB,OAAAA,GAAAE,EAAAF,CAAA,EAA4B,QAG5B,MAAA,EAAO,CAEb,EAEOG,EAAAC,GACLA,EAAA,SACEA,EAAA,QACE,CAAA,CAAAN,EAAAM,EAAA,QAAAA,EAAA,OAAAA,EAAA,aAAA,GAAA,CAAA,EAAAA,EAAA,OAAAA,EAAA,eAEF,CAAA,EAAAA,EAAA,OAAAA,EAAA,eAEAA,EAAA,QACE,CAAA,CAAAN,EAAAM,EAAA,QAAAA,EAAA,OAAAA,EAAA,aAAA,EAEF,GAIGH,EAAAD,GAGLA,GAFA,mCAEA,KAAAA,CAAA,EAGKE,EAAAF,GAKLA,GAAAA,IAAA;4mCCwBFK,EAAA,CAAA,CAAoB,SAAAC,EAAEA,OAAAA,EAAUC,mBAAAA,EAAQC,GAAAA,CAA0C,IAAA,CAChF,MAAAC,EAAAC,cAAAC,GAAA,CAEIA,EAAAA,QAAAA,EAEAL,GAAAA,MAAAA,EAAAA,EAAAA,OAAAA,MAAAA,EAAAA,MACAE,GAAAA,MAAAA,EAAAA,EAAsB,EAAA,CAAAI,EAAA,KAAAN,CAAA,CAAA,EAK1BO,EAAAH,cAAAC,GAAA,CAEIA,EAAAA,QAAAA,EAEAJ,GAAAA,MAAAA,EAAAA,GACAC,GAAAA,MAAAA,EAAAA,EAAsB,EAAA,CAAAD,CAAA,CAAA,EAK1B,OAAAO,EAAA,MAAA,CACE,UAAAC,EAAA,WAAuBC,SAAAA,CAAAA,EAAAA,OAAAA,EAAAA,QAAAA,CACL,UAAAD,EAAA,MAAyBE,SAAAA,EAAAA,KAAcA,CAAAA,EAAAA,EAAAA,QAAAA,CACvD,iBAAAL,EAAA,OAAA,CAAAA,EAAA,MACwCM,KAAAA,EAAAA,KAC1BC,KAAAA,EAAAA,KACAC,UAAAA,EAAAA,OAAAA,SAAAA,UAAAA,OACqCC,YAAAA,EAAAA,YAC9BC,UAAAA,EAAAA,MACDC,KAAAA,MACb,SAAAd,EACKA,MAAAA,EAAAA,OAAAA,EAAAA,cACkBe,IAAAA,EAAAA,IACjBC,IAAAA,EAAAA,IACAC,SAAAA,EAAAA,SACKC,SAAAA,EAAAA,SACAC,UAAAA,EAAAA,cACCC,OAAAA,CAOThB,CAAAA,EAAAA,EAAAA,MAAAA,CAGV,UAAAE,EAAA,aAAuBe,SAAAA,EAAAA,EAAAA,MAAAA,CACR,UAAAf,EAAA,MACOgB,QAAAA,CACT,EAAA,QAAK,QAAA,CAAkB,EAAE,QAAAnB,EAAA,OAAA,CAAAA,EAAA,OAAAA,EAAA,MAAA,CACoB,EAAA,EAAK,QAAA,CAAY,EAAA,CAAM,EAAA,QAAK,QAAA,CAAkB,EAAE,SAAAA,EAAA,KAE/FmB,CAAAA,CACK,CAAA,EAAAC,EAAA,MAAA,CAEhB,UAAAjB,EAAA,YAAuBkB,SAAAA,EAAAA,EAAAA,IAAAA,CACV,UAAAlB,EAAA,MAAmBgB,QAAAA,CAAgB,EAAA,QAAK,QAAA,CAAkB,EAAE,QAAAnB,EAAA,OAAA,CAA2B,EAAA,EAAK,QAAA,CAAY,EAAA,CAAM,EAAA,QAAK,QAAA,CAAkB,EAAE,SAAAA,EAAA,QAAAoB,EAAAE,EAAA,CACxH,GAAAtB,EAAA,MAAWuB,CAAAA,CAAS,CAAA,CAClC,CAAA,CAAA,CACR,CAAA,CAGZ,i7FCtHA,MAAAC,EAAA,CAAA,CAAc,SAAAC,EAAEA,mBAAAA,EAAUC,UAAAA,EAAoBC,aAAAA,EAAWC,QAAAA,EAAcC,GAAAA,CAAsC,IAAA,CAC3G,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAAA,SAAAhC,EAAA,MAAA,EACA,CAAAiC,EAAAC,CAAA,EAAAF,EAAA,SAAA,EAAA,EACA,CAAAG,EAAAC,CAAA,EAAAJ,EAAA,SAAA,EAAA,EAEAK,EAAAC,SAAA,IAAA,EAEAC,EAAAA,UAAAA,IAAAA,CACE,GAAA,CAAAF,EAAA,QACE,OAEF,MAAAG,EAAA,CAAAV,EAAA,KAAAtC,GAAAA,EAAA,UAAA,CAAAA,EAAA,KAAA,EAEA4C,EAAAA,CAAAA,CAAkB,EAAA,CAAAN,CAAA,CAAA,EAGpB,MAAAW,EAAA3C,cAAA4C,GAAA,CAEIA,EAAAA,eAAAA,EACAjB,GAAAA,MAAAA,EAAAA,GACAC,GAAAA,MAAAA,EAAAA,GAEAQ,EAAAA,EAAAA,CAAmB,EAAA,CAAAJ,EAAAL,CAAA,CAAA,EAKvB5B,EAAAC,EAAAA,YAAA,CAAA6C,EAAAC,IAAA,CACEd,EAAA,KAAAtC,GAAAA,EAAA,OAAAoD,CAAA,GAMAb,EAAAA,GACEc,EAAA,IAAArD,GACEA,EAAA,OAAAoD,EACE,CAAO,GAAApD,EACFA,MAAAA,GACI,MAAAD,EAAA,CACc,GAAAC,EAAKA,MAAAA,CAAOmD,CAAAA,EAAO,MAAAA,CACxCA,EAGFnD,CACF,CAGKsD,CACR,EAAA,CAAA,CAAA,EAGH,OAAA5C,EAAA,OAAA,CACE,IAAAmC,EAAWA,UAAAA,EAAAA,EAAAA,KAAAA,EAAAA,8BAAAA,EAAAA,iBAAAA,EAAAA,EAAsG,SAAAI,EAAaA,SAAAA,CAAAA,EAAAA,MAAAA,CAC5H,SAAA,CAAAd,GAAAP,EAAA2B,EAAA,CAEY,MAAA,EAAQ,UAAA5C,EAAA,UAAqBwB,SAAAA,CAClCA,CAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CAGY,UAAAxB,EAAA,aAAqByB,SAAAA,CAAeA,CAAAA,EAAAA,EAAAA,EAAAA,CACvC,KAAA,GAAK,SAAAE,GAAA,YAAAA,EAAA,IAAA,CAAAtC,EAAAwD,IAEf5B,EAAA,MAAA,CACE,UAAA6B,EAAA9C,EAAA,MAAAA,EAAAX,EAAA,MAAA,MAAA,CAAA,EAA8E,SAAAA,EAAA,YAAA,SAAA4B,EAAA3B,EAAA,CAE/D,GAAAD,EACLA,MAAAA,EAAAA,OAAAA,EAAAA,cACwBoB,SAAAA,CAAAA,EAAAA,IAAAA,CAE1Bf,EAAAA,EAAAA,CAAAA,CAAsB,EACxB,mBAAAE,GAAA,QAEEP,EAAAA,EAAAA,qBAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAA4B,EAC9B,cAAAwD,IAAA,EACqB,SAAAxD,EAAA,QACL0D,SAAAA,CACNrB,CAAAA,CACX,EAAArC,EAAA,IAAA,EAIR,CAAA,EAAA4B,EAAA+B,EAAA,CAEe,KAAA,CAAA,CAAAnD,EAAA,oBAAeoD,SAAAA,EAAAA,EAAAA,CACjB,WAAA,SAAY,eAAA,SAAwB,SAAApD,EAAA,qBAAAoB,EAAA,IAAA,CAClB,UAAAjB,EAAA,oBAAqBiD,wBAAAA,CAA8C,OAAApD,EAAA,mBAAgBoD,CAAoB,CAAA,CAAM,CAAA,CAC9H,CAAA,CAAA,CACG,CAAA,EAAApD,EAAA,SAAAoB,EAAAiC,EAAA,CAGN,eAAArD,EAAA,cAAA,SAAuC,SAAAA,EAAA,QAAA,IAAA,CAAAuB,EAAAyB,IAAA5B,EAAAkC,EAAA,CAE1C,GAAA/B,EAEDA,SAAAA,EAAAA,OAAAA,SAAAA,CAAAA,EAAAA,EAC4CM,QAAAA,EAAAA,OAAAA,UAAAA,CACXA,EAAAA,GAAAA,EAAAA,QAAAA,GAAAA,CAAAA,CAExC,CAAA,EAAA7B,EAAA,OAAAoB,EAAAiC,EAAA,CAIW,eAAArD,EAAA,cAAA,SAAuC,SAAAA,EAAA,MAAA,IAAA,CAAAuD,EAAAP,IAAA5B,EAAA,IAAA,CAEjD,UAAAjB,EAAA,KAAqBoD,KAAAA,EAAAA,KAA2CC,OAAAA,SAAa,SAAAD,EAAA,IACrE/C,EAAAA,GAAAA,EAAAA,QAAAA,GAAAA,CAAAA,CAET,CAAA,CAAA,CAEJ,CAAA,CAGP"}