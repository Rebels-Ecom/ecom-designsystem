{"version":3,"file":"product-card.stories-a430667d.js","sources":["../../src/design-system/components/atoms/placeholder/placeholder.tsx","../../src/design-system/components/molecules/tags-list/tags-list.tsx","../../src/design-system/components/molecules/product-card/product-card.tsx"],"sourcesContent":["import React from 'react'\nimport styles from './placeholder.module.css'\nimport cx from 'classnames'\n\nexport type TPlaceholderType = 'image' | 'tags' | 'heading' | 'p_long' | 'p_short'\nexport interface IPlaceholder {\n    type: TPlaceholderType\n}\n\nfunction Placeholder({type = 'heading'}: IPlaceholder) {\n\n    function getPlaceholderType(type: TPlaceholderType){\n        switch (type) {\n            case 'image':\n                return 'placeholderImage'\n            case 'tags':\n                return 'placeholderTags'\n            case 'p_long':\n                return 'placeholderParagraphLong'\n            case 'p_short':\n                return 'placeholderParagraphShort'\n            case 'heading':\n            default:\n                return 'placeholderHeading'\n        }\n    }\n\n    return (\n        <div className={cx(styles.placeholder, styles[getPlaceholderType(type)])}/>\n    )\n}\n\nexport { Placeholder }","import React from 'react'\nimport styles from './tags-list.module.css'\nimport { ITag, Tag } from '../../atoms/tag/tag'\n\nfunction TagsList({tagsList=[]} : {tagsList:Array<ITag>}) {\n    return(\n        <ul className={styles.tagsList}>\n            {Array.isArray(tagsList) && tagsList.length>0 && tagsList.map((tag, index)=>(\n                <li key={index}>\n                    <Tag {...tag} ></Tag>\n                </li>\n                ))\n            }\n        </ul>\n    )\n}\n\nexport { TagsList }","import React, { useState } from 'react'\nimport styles from './product-card.module.css'\nimport cx from 'classnames'\nimport { Picture } from '../../atoms/picture/picture'\nimport { getProductPicture } from '../../../../helpers/picture-helper'\nimport { DividerLines } from '../../atoms/divider-lines/divider-lines'\nimport { ProductQuantityInput } from '../product-quantity-input/product-quantity-input'\nimport { Button, IButton } from '../../atoms/button/button'\nimport { IProduct } from '../../../../types/product'\nimport { convertNumToStr } from '../../../../helpers/format-helper'\nimport { ProductVariantList } from '../product-variant-list/product-variant-list'\nimport fallbackProductImageUrl from '../../../../assets/fallback-images/defaultFallbackImage.svg'\nimport { TagsList } from '../tags-list/tags-list'\nimport { Placeholder } from '../../atoms/placeholder/placeholder'\n\n\nexport interface IProductCard extends IProduct {\n  product: IProduct\n  changePackagingButton: IButton\n  addToCartButton: IButton\n  addToCart: CallableFunction\n  loading: boolean\n  linkComponent?: any\n}\n\nfunction ProductCard({ product, changePackagingButton, addToCartButton, addToCart, loading, linkComponent: Link }: IProductCard ) {\n  const { productId, productImageUrl, price, itemNumberPerSalesUnit} = product\n  const [variantsListOpen, setVariantsListOpen] = useState<Boolean>(false)\n  const [ myProduct, setProduct ] = useState(\n    { ...product,\n      productImage: getProductPicture(productId, productImageUrl),\n      quantity: '1',\n      totalPrice: convertNumToStr(price*itemNumberPerSalesUnit),\n      selectedVariantId: productId\n    }\n  ) \n\n  function handleOnChangeQuantity(e: React.ChangeEvent<HTMLInputElement>) {\n    const quantity = parseInt(e.target.value) || 1\n    setProduct({\n      ...myProduct, \n      quantity:quantity.toString(),\n      totalPrice: convertNumToStr(myProduct.price * myProduct.itemNumberPerSalesUnit * quantity)\n    })\n  }\n\n  function handleVariantsButtonClick(){\n      setVariantsListOpen(true)\n  }\n\n  function handlePackageChange(selectedVariant:any){\n    const quantity = myProduct.productId===selectedVariant.variantId ? parseInt(myProduct.quantity) : 1;\n    setProduct({\n      ...myProduct, \n      productId: selectedVariant.variantId,\n      productImage: getProductPicture(selectedVariant.variantId, selectedVariant.imageUrl ? selectedVariant.imageUrl : fallbackProductImageUrl),\n      country: selectedVariant.country,\n      packaging: selectedVariant.variantName,\n      priceStr: selectedVariant.listPricePerUnitString,\n      price: selectedVariant.price,\n      salesUnit: selectedVariant.salesUnit,\n      itemNumberPerSalesUnit: selectedVariant.itemNumberPerSalesUnit,\n      totalPrice: convertNumToStr(selectedVariant.price * selectedVariant.itemNumberPerSalesUnit * quantity),\n      quantity: quantity.toString(),\n      selectedVariantId: selectedVariant.variantId\n    })\n    setVariantsListOpen(false)\n  }\n\n  if(variantsListOpen) {\n    return(\n        <ProductVariantList className= {styles.productCard} variantsList= {myProduct.productVariantList} onVariantSelect={handlePackageChange} selectedVariantId={myProduct.selectedVariantId}/>\n    )\n  }\n  else {\n    return (\n      <div className={styles.productCard}>\n        { Array.isArray(myProduct.tags) && myProduct.tags.length ? <>{ loading ? <Placeholder type='tags' /> : <TagsList tagsList={myProduct.tags}/> }</> : null }\n        { loading \n          ?\n          <Placeholder type='image' />\n          :\n          <div className={styles.imageWrapper}>\n              <Picture {...myProduct.productImage} classNamePicture={styles.cardPicture} classNameImg={`${styles.cardImage}`} fallbackImageUrl={fallbackProductImageUrl}/> \n          </div>\n        }\n        { loading \n          ?\n          <div className={styles.placeholderContent}>\n            <Placeholder type={'heading'} />\n            <Placeholder type={'p_short'} />\n            <Placeholder type={'p_long'} />\n            <Placeholder type={'p_long'} />\n          </div>\n          :\n          <div className={`${styles.cardContent}`}>\n            { myProduct.productUrl && Link\n              ? \n                <Link to={myProduct.productUrl} href={myProduct.productUrl} className={styles.headingWrapper}><h5 className={styles.heading}>{myProduct.productName}</h5></Link>\n              : \n                <h5 className={styles.heading}>{myProduct.productName}</h5>\n            }\n            <DividerLines/>\n            <p className={cx(styles.textGray, 'bodyS')}>{`Art.nr. ${productId} - ${myProduct.country}`}</p>\n            <p className={cx(styles.textPurple, 'bodyS')}>{`${myProduct.packaging}: ${myProduct.priceStr} kr/st`}</p>\n          </div>\n        }\n        <Button {...changePackagingButton} surface='secondary' iconRight={{icon:'icon-layers'}} rounded fullWidth onClick={()=>handleVariantsButtonClick()} disabled={loading}>Byt förpackning</Button>\n        { loading \n          ?\n          <div className={styles.placeholderContent}>\n            <Placeholder type={'p_long'} />\n            <Placeholder type={'p_long'} />\n          </div>\n          :\n          <ProductQuantityInput\n            className={styles.productCardInput}\n            salesUnit = {myProduct.salesUnit}\n            itemNumberPerSalesUnit = {myProduct.itemNumberPerSalesUnit}\n            totalPrice = {myProduct.totalPrice}\n            quantity = {myProduct.quantity}\n            quantityInputId = {myProduct.productId}\n            onChange={handleOnChangeQuantity}\n          />\n        }\n        <Button {...addToCartButton} className={!loading ? styles.productCardBtn : ''} fullWidth onClick={()=>addToCart(product)} disabled={loading}>Lägg i kundvagn</Button>\n      </div>\n    )\n  }\n}\n\nexport { ProductCard }"],"names":["Placeholder","type","getPlaceholderType","type2","_jsx","cx","styles","TagsList","tagsList","Tag","tag","index","ProductCard","product","changePackagingButton","addToCartButton","addToCart","loading","productId","productImageUrl","price","itemNumberPerSalesUnit","variantsListOpen","setVariantsListOpen","useState","myProduct","setProduct","convertNumToStr","handleOnChangeQuantity","e","quantity","handleVariantsButtonClick","handlePackageChange","selectedVariant","variantId","country","variantName","listPricePerUnitString","salesUnit","ProductVariantList","productCard","productVariantList","selectedVariantId","_jsxs","tags","imageWrapper","productImage","cardPicture","cardImage","fallbackProductImageUrl","placeholderContent","cardContent","productUrl","headingWrapper","heading","productName","priceStr","Button","ProductQuantityInput","productCardInput","totalPrice"],"mappings":"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"}