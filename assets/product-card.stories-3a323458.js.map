{"version":3,"file":"product-card.stories-3a323458.js","sources":["../../src/design-system/components/molecules/product-card/product-card.tsx","../../src/design-system/components/molecules/product-card/product-card.stories.tsx"],"sourcesContent":["import React, { useState} from 'react'\nimport styles from './product-card.module.css'\nimport { CardImage } from '../card-image/card-image'\nimport { ProductQuantityInput } from '../product-quantity-input/product-quantity-input'\nimport { IButton, Button } from '../../atoms/button/button'\nimport { convertNumToStr } from '../../../../helpers/format-helper'\nimport { ProductVariantList } from '../product-variant-list/product-variant-list'\nimport { IProduct } from '../../../../types/product'\nimport { getProductPicture } from '../../../../helpers/picture-helper'\n\nexport interface IProductCard extends IProduct {\n    product: IProduct\n    button: IButton\n    addToCart: CallableFunction\n}\n\nconst ProductCard = ({ productId, productName, productImageUrl, country, packaging, priceStr, price, salesUnit, itemNumberPerSalesUnit, productVariantList, button, addToCart }: IProductCard ) => {\n    const [product, setProduct] = useState(\n        {   productId,\n            productName, \n            productImage: getProductPicture(productId, productImageUrl),\n            country,\n            packaging,\n            priceStr,\n            price,\n            salesUnit,\n            itemNumberPerSalesUnit,\n            quantity: '1',\n            totalPrice: convertNumToStr(price*itemNumberPerSalesUnit),\n            productVariantList,\n            selectedVariantId: productId\n        }\n    )\n    const [packageMenuOpen, setPackageMenuOpen] = useState<Boolean>(false);\n\n    function handleOnChangeQuantity(e: React.ChangeEvent<HTMLInputElement>) {\n        const quantity = parseInt(e.target.value) || 1;\n        setProduct({\n            ...product, \n            quantity:quantity.toString(),\n            totalPrice: convertNumToStr(product.price * product.itemNumberPerSalesUnit * quantity)})\n    }\n\n    function handleButtonClick(){\n        setPackageMenuOpen(true)\n    }\n\n    function handlePackageChange(selectedVariant:any){\n        setProduct({\n            ...product, \n            productId: selectedVariant.variantId,\n            productImage: selectedVariant.image,\n            country: selectedVariant.country,\n            packaging: selectedVariant.variantName,\n            priceStr: selectedVariant.listPricePerUnitString,\n            price: selectedVariant.price,\n            salesUnit: selectedVariant.salesUnit,\n            itemNumberPerSalesUnit: selectedVariant.itemNumberPerSalesUnit,\n            totalPrice: convertNumToStr(selectedVariant.price * selectedVariant.itemNumberPerSalesUnit),\n            selectedVariantId: selectedVariant.variantId\n        });\n\n        setPackageMenuOpen(false)\n    }\n\n    if(packageMenuOpen) {\n        return(\n            <ProductVariantList className= {styles.productCard} variantsList= {product.productVariantList} onVariantSelect={handlePackageChange} selectedVariantId={product.selectedVariantId}/>\n        )\n    }\n    else {\n        return(\n            <div className= {styles.productCard}>\n                <CardImage \n                    heading={product.productName}\n                    image = {product.productImage}\n                    articleId = {product.productId}\n                    country = {product.country}\n                    packaging = {product.packaging}\n                    unitPriceStr = {product.priceStr}\n                    onClick = {handleButtonClick}\n                />\n                <ProductQuantityInput\n                    className={styles.productCardInput}\n                    salesUnit = {product.salesUnit}\n                    itemNumberPerSalesUnit = {product.itemNumberPerSalesUnit}\n                    totalPrice = {product.totalPrice}\n                    quantity = {product.quantity}\n                    quantityInputId = {product.productId}\n                    onChange={handleOnChangeQuantity}\n                />\n                <Button {...button} className={styles.productCardBtn} fullWidth onClick={()=>addToCart(product)}>Add to cart</Button>\n            </div>\n        )\n    }\n}\n\nexport { ProductCard }\n","import React from 'react';\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\nimport { ProductCard } from './product-card';\nimport { IProduct } from '../../../../types/product';\nimport { dummyBeerProduct } from './dummy-product';\nimport { ProductVariantListStory } from '../product-variant-list/product-variant-list.stories';\nimport { getProductPicture } from '../../../../helpers/picture-helper';\nexport default ({\n  title: 'Design System/Molecules/Product/ProductCard',\n  component: ProductCard\n} as ComponentMeta<typeof ProductCard>);\nconst Template: ComponentStory<typeof ProductCard> = args => {\n  function handleAddToCart(product) {\n    alert(`Adding to cart - ${product.productName} - ${product.packaging}. Quantity: ${product.quantity}, Total: ${product.totalPrice}`);\n  }\n  return <ProductCard {...args} addToCart={handleAddToCart} />;\n};\nfunction getVariantsList(productName: string, variantsList: any) {\n  const firstVariantId = variantsList[0].VariantId;\n  return variantsList.map(variant => {\n    return {\n      productName: productName,\n      variantName: variant.Name,\n      variantId: variant.VariantId,\n      country: Array.isArray(variant.ShortTexts) && variant.ShortTexts.length ? variant.ShortTexts[0] : '',\n      listPricePerUnitString: variant.ListPricePerUnitString,\n      price: variant.ListPricePerUnit,\n      salesUnit: variant.SalesUnit,\n      itemNumberPerSalesUnit: variant.UnitsPerBaseUnit,\n      image: getProductPicture(variant.VariantId, variant.PrimaryImageUrl),\n      checked: variant.VariantId === firstVariantId,\n      onChange: () => {}\n    };\n  });\n}\nfunction getProduct(productData: any): IProduct {\n  const product = productData.Variants[0];\n  return {\n    productId: product.VariantId,\n    productName: productData.DisplayName,\n    productImageUrl: product.PrimaryImageUrl,\n    country: Array.isArray(product.ShortTexts && product.ShortTexts.length) ? product.ShortTexts[0] : '',\n    packaging: product.VariantFullName,\n    priceStr: product.ListPricePerUnitString,\n    price: product.ListPricePerUnit,\n    salesUnit: product.SalesUnit,\n    itemNumberPerSalesUnit: product.UnitsPerBaseUnit,\n    productVariantList: getVariantsList(productData.DisplayName, productData.Variants)\n  };\n}\nconst productArgs = getProduct(dummyBeerProduct);\nexport const ProductCardStory = Template.bind({});\nProductCardStory.storyName = 'Product Card';\nProductCardStory.args = {\n  ...productArgs\n};\nProductCardStory.parameters = {\n  ...ProductCardStory.parameters,\n  docs: {\n    ...ProductCardStory.parameters?.docs,\n    source: {\n      originalSource: \"args => {\\n  function handleAddToCart(product) {\\n    alert(`Adding to cart - ${product.productName} - ${product.packaging}. Quantity: ${product.quantity}, Total: ${product.totalPrice}`);\\n  }\\n  return <ProductCard {...args} addToCart={handleAddToCart} />;\\n}\",\n      ...ProductCardStory.parameters?.docs?.source\n    }\n  }\n};"],"names":["ProductCard","productId","productName","productImageUrl","country","packaging","priceStr","price","salesUnit","itemNumberPerSalesUnit","productVariantList","button","product","setProduct","useState","convertNumToStr","packageMenuOpen","setPackageMenuOpen","handleOnChangeQuantity","e","quantity","handleButtonClick","handlePackageChange","selectedVariant","variantId","image","variantName","listPricePerUnitString","_jsx","ProductVariantList","styles","productCard","selectedVariantId","_jsxs","productImage","productCardInput","totalPrice","productCardBtn","addToCart","productCard_stories","title","component","Template","args","handleAddToCart","getVariantsList","variantsList","firstVariantId","VariantId","map","variant","Name","Array","isArray","ShortTexts","length","ListPricePerUnitString","ListPricePerUnit","SalesUnit","UnitsPerBaseUnit","getProductPicture","PrimaryImageUrl","checked","onChange","getProduct","productData","Variants","DisplayName","VariantFullName","productArgs","dummyBeerProduct","ProductCardStory","bind","storyName","parameters","docs","source","originalSource"],"mappings":"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"}