{"version":3,"file":"multi-select.stories-a2f2dd05.js","sources":["../../src/design-system/components/atoms/multi-select/multi-select.tsx"],"sourcesContent":["import { useState } from 'react'\nimport styles from './multi-select.module.css'\nimport { Button } from '../button/button'\nimport { IIcon } from '../icon/icon'\n\nexport interface IMultiSelect {\n  id?: string\n  name: string\n  options: Array<ISelectOption>\n  selectedOptions: Array<string>\n  onToggleOption: CallableFunction\n  icon?: IIcon\n}\n\nexport interface ISelectOption {\n  name: string\n  value: string\n}\n\nconst MultiSelect = (\n  ({ name, options, selectedOptions, onToggleOption, icon } : IMultiSelect) => {\n    \n    const[isDropdownOpen, setIsDropdownOpen] = useState(false)\n\n    function handleClickOnDropdown() {\n        setIsDropdownOpen(!isDropdownOpen)\n    }\n\n    function isOptionsPopulated() {\n      return options instanceof Array && options.length\n    }\n\n    function getSelectedOptionName(options: Array<ISelectOption>, selectedOptionValue: string) {\n      const selectedOption = options.find(option => option.value===selectedOptionValue);\n      return selectedOption?.name;\n    }\n\n    return isOptionsPopulated() ? (\n      <Button\n        type='button' \n        surface='x'\n        size='xx-small'\n        className={styles.multiSelectDropdown} onClick={()=>handleClickOnDropdown()}\n        iconRight={icon}\n      >\n        {(!selectedOptions || selectedOptions.length === 0) ?\n          name :\n          (selectedOptions.length === 1 ?\n            `${name} (${getSelectedOptionName(options, selectedOptions[0])})` :\n            `${name} (${selectedOptions.length} valda)`\n          )\n        }\n        {isDropdownOpen ? \n          <ul className={styles.multiSelectDropdownOptions}>\n            {options.map(option => {\n              const isSelected = selectedOptions && selectedOptions.some(item=>item===option.value)\n              \n              return (\n                <li key={option.value} className={styles.multiSelectDropdownOption}>\n                  <input type=\"checkbox\" checked={isSelected} onChange={() => onToggleOption(option)} className={styles.multiSelectDropdownOptionCheckbox}></input>\n                  <span>{option.name}</span>\n                </li>\n              )\n            })}\n          </ul> : null}\n      </Button>\n    ) : null\n  }\n)\n\nexport { MultiSelect }\n"],"names":["MultiSelect","name","options","selectedOptions","onToggleOption","isDropdownOpen","setIsDropdownOpen","useState","handleClickOnDropdown","isOptionsPopulated","length","getSelectedOptionName","options2","selectedOptionValue","selectedOption","option","_jsxs","Button","styles","multiSelectDropdown","icon","multiSelectDropdownOptions","isSelected","item","multiSelectDropdownOption","multiSelectDropdownOptionCheckbox"],"mappings":"maAmBAA,EAAA,CAAA,CACG,KAAAC,EAAEA,QAAAA,EAAMC,gBAAAA,EAASC,eAAAA,EAAiBC,KAAAA,CAAoC,IAAA,CAErE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEA,SAAAC,GAAA,CACIF,EAAAA,CAAAA,CAAAA,CAAiC,CAGrC,SAAAG,GAAA,CACE,OAAAP,aAAA,OAAAA,EAAA,MAA2CQ,CAG7C,SAAAC,EAAAC,EAAAC,EAAA,CACE,MAAAC,EAAAF,EAAA,KAAAG,GAAAA,EAAA,QAAAF,CAAA,EACA,OAAAC,GAAA,YAAAA,EAAA,IAAuBb,CAGzB,OAAAQ,EAAA,EAAAO,EAAAC,EAAA,CACS,KAAA,SACA,QAAA,IACG,KAAA,WACH,UAAAC,EAAA,oBACaC,QAAAA,IAAAA,EAAAA,EAAwD,UAAAC,EAC/DA,SAAAA,CAAAA,CAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,KAAAA,GAAAA,MAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,KAAAA,CAUT,UAAAF,EAAA,2BAAsBG,SAAAA,EAAAA,IAAAA,GAAAA,CAElB,MAAAC,EAAAnB,GAAAA,EAAA,KAAAoB,GAAAA,IAAAR,EAAA,KAAA,EAEA,OAAAC,EAAA,KAAA,CACE,UAAAE,EAAA,0BAAyCM,SAAAA,CAAAA,EAAAA,QAAAA,CACvC,KAAA,WAAY,QAAAF,EAAoBA,SAAAA,IAAAA,EAAAA,CAAAA,EAAiD,UAAAJ,EAAA,iCAAqBO,CAAAA,EAAAA,EAAAA,OAAAA,CACtG,SAAAV,EAAA,IAAcd,CAAAA,CAAAA,CAAY,EAAAc,EAAA,KAAA,CACxB,CAAA,CAEP,CAAA,EAAA,IAAA,CACS,CAAA,EAAA,IAGpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}