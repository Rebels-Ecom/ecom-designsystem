{"version":3,"file":"alert-message.stories-45fa328e.js","sources":["../../src/design-system/components/atoms/alert-message/alert-message.tsx"],"sourcesContent":["import React from 'react'\nimport styles from './alert-message.module.css'\nimport { Icon } from '../icon/icon'\nimport { IconButton } from '../icon-button/icon-button'\nimport cx from 'classnames'\n\nexport type TAlertMessageType = 'info' | 'warning' | 'error'\nexport interface IAlertMessage {\n  children: React.ReactNode\n  type: TAlertMessageType\n  isOpen: boolean\n  onClose: () => void\n}\n\nfunction getAlertIcon(type: TAlertMessageType) {\n  switch (type) {\n    case 'info':\n      return 'icon-info'\n    case 'warning':\n      return 'icon-alert-circle'\n    case 'error':\n      return 'icon-alert-circle'\n    default:\n      return 'icon-info'\n  }\n}\n\nfunction AlertMessage({ children, type, isOpen, onClose }: IAlertMessage) {\n  if (!isOpen) return null\n  return (\n    <div className={cx(styles.alertMessage, styles[type])}>\n      <div className={styles.contentWrapper}>\n        {type && <Icon icon={getAlertIcon(type)} />}\n        <span>{children}</span>\n        <IconButton type=\"button\" onClick={onClose} icon=\"icon-x\" size=\"large\" isTransparent noBorder />\n      </div>\n    </div>\n  )\n}\n\nexport { AlertMessage }\n"],"names":["getAlertIcon","type","AlertMessage","children","isOpen","_jsx","cx","styles","_jsxs","contentWrapper","onClose"],"mappings":"kfAcA,SAAAA,EAAAC,EAAA,CACE,OAAAA,EAAA,CAAY,IAAA,OAER,MAAA,YAAO,IAAA,UAEP,MAAA,oBAAO,IAAA,QAEP,MAAA,oBAAO,QAEP,MAAA,WAAO,CAEb,CAEA,SAAAC,EAAA,CAAsB,SAAAC,EAAEA,KAAAA,EAAUF,OAAAA,EAAMG,QAAAA,CAA+B,EAAA,CACrE,OAAAA,EACAC,EAAA,MAAA,CACE,UAAAC,EAAAC,EAAA,aAAAA,EAAAN,CAAA,CAAA,EAAoD,SAAAO,EAAA,MAAA,CAClD,UAAAD,EAAA,eAAuBE,SAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CACP,KAAAT,EAAAC,CAAA,CAAwB,CAAA,EAAAI,EAAA,OAAA,CACtC,SAAAF,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,CACW,KAAA,SAAM,QAAAO,EAAkBA,KAAAA,SAAc,KAAA,QAAc,cAAA,GAAqB,SAAA,EAAS,CAAA,CAAA,CAAG,CAAA,CAC7F,CAAA,EAPI,IAUf;;;;;;;;;;;;;;;"}