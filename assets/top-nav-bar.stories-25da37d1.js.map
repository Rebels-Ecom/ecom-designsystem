{"version":3,"file":"top-nav-bar.stories-25da37d1.js","sources":["../../src/design-system/components/molecules/top-nav-bar/top-nav-bar.tsx"],"sourcesContent":["import { TNavLink } from '../../../../types/links'\nimport { Icon } from '../../atoms/icon/icon'\nimport styles from './top-nav-bar.module.css'\nimport cx from 'classnames'\n\nexport interface ITopNavBar {\n  topNavLinks: Array<TNavLink>\n  userLoggedIn: boolean\n  userName?: string\n  linkComponent: any\n}\n\nconst TopNavBar = ({ topNavLinks, userLoggedIn=false, userName,  linkComponent: Link }: ITopNavBar) => {\n  const contactLinks = topNavLinks.filter((link) => link.navLinkType === 'email' || link.navLinkType === 'telephone')\n  const userLinks = topNavLinks.filter((link) => link.navLinkType === 'login' || link.navLinkType === 'register')\n  const loggedInUserLinks = topNavLinks.filter((link) => link.navLinkType === 'logout' || link.navLinkType === 'loggedInUser')\n  return (\n    <div className={styles.topNavBar}>\n      {Array.isArray(contactLinks) && contactLinks.length ? (\n        <ul className={cx(styles.navLinksWrapper, styles.navLinksLeft)}>\n          {contactLinks.map((link: TNavLink, index) => (\n            <a href={link.navLinkType === 'email' ? `mailto:${link.href}` : `tel:${link.href}`} key={`${link.href}-${index}`} className={styles.topNavLink}>\n              <Icon icon={link.navLinkType === 'email' ? 'icon-mail' : 'icon-phone'} className={styles.navIcon} />\n              <span className={cx('bodyS', styles.topNavText)}>{link.children}</span>\n            </a>\n          ))}\n        </ul>\n      ) : null }\n      {userLoggedIn \n        ? \n        <>\n          { Array.isArray(loggedInUserLinks) && loggedInUserLinks.length \n            ? (<ul className={cx(styles.navLinksWrapper, styles.navLinksRight)}>\n                {loggedInUserLinks.map((link: TNavLink, index) => {\n                  if(link.navLinkType === 'loggedInUser'){\n                    return(\n                      <div className={styles.topNavLink} key={`${link.href}-${index}`}>\n                        <Icon icon={'icon-users'} className={styles.navIcon} />\n                        <span className={cx('bodyS', styles.topNavText)}>{link.children} {userName}</span>\n                      </div>\n                    )\n                  }\n                  return(\n                    <Link to={link.href} className={styles.topNavLink} key={`${link.href}-${index}`} target={'_blank'} title={link.children}>\n                      <Icon icon={'icon-x-circle'} className={styles.navIcon} />\n                      <span className={cx('bodyS', styles.topNavText)}>{link.children}</span>\n                    </Link>\n                  )\n                  })}\n              </ul>) \n            : \n            null\n          }\n        </>\n        : \n        <>\n          { Array.isArray(userLinks) && userLinks.length \n            ? (<ul className={cx(styles.navLinksWrapper, styles.navLinksRight)}>\n                {userLinks.map((link: TNavLink, index) => (\n                  <Link to={link.href} className={styles.topNavLink} key={`${link.href}-${index}`} target={'_blank'} title={link.children}>\n                    <Icon icon={link.navLinkType === 'register' ? 'icon-plus-circle' : 'icon-user'} className={styles.navIcon} />\n                    <span className={cx('bodyS', styles.topNavText)}>{link.children}</span>\n                  </Link>\n                ))}\n              </ul>) \n            : \n            null\n          }\n        </>\n      }\n    </div>\n  )\n}\n\nexport { TopNavBar }\n"],"names":["TopNavBar","topNavLinks","userName","contactLinks","link","userLinks","loggedInUserLinks","_jsxs","styles","topNavBar","cx","index","href","topNavLink","navIcon","children","userLoggedIn","_jsx","_Fragment","Link"],"mappings":"wcAYAA,EAAA,CAAA,CAAmB,YAAAC,EAAEA,aAAAA,EAAAA,GAA0B,SAAAC,EAAOA,cAAAA,CAA2C,IAAA,CAC/F,MAAAC,EAAAF,EAAA,OAAAG,GAAAA,EAAA,cAAA,SAAAA,EAAA,cAAA,WAAA,EACAC,EAAAJ,EAAA,OAAAG,GAAAA,EAAA,cAAA,SAAAA,EAAA,cAAA,UAAA,EACAE,EAAAL,EAAA,OAAAG,GAAAA,EAAA,cAAA,UAAAA,EAAA,cAAA,cAAA,EACA,OAAAG,EAAA,MAAA,CACE,UAAAC,EAAA,UAAuBC,SAAAA,CAAAA,MAAAA,QAAAA,CAAAA,GAAAA,EAAAA,OAAAA,EAAAA,KAAAA,CAEnB,UAAAC,EAAAF,EAAA,gBAAAA,EAAA,YAAA,EAA6D,SAAAL,EAAA,IAAA,CAAAC,EAAAO,IAAAJ,EAAA,IAAA,CAEzD,KAAAH,EAAA,cAAA,QAAA,UAAAA,EAAA,OAAA,OAAAA,EAAA,OAA4EQ,UAAAA,EAAAA,WAAwDC,SAAAA,CAAAA,EAAAA,EAAAA,CAC7H,KAAAT,EAAA,cAAA,QAAA,YAAA,aAAoD,UAAAI,EAAA,OAAgCM,CAAAA,EAAAA,EAAAA,OAAAA,CACzF,UAAAJ,EAAA,QAAAF,EAAA,UAAA,EAA8C,SAAAJ,EAAA,QAASW,CAAAA,CAAAA,CAAgB,EAAA,GAAAX,EAAA,QAAAO,GAAA,CAAA,CAE1E,CAAA,EAAA,KAAAK,EAAAC,EAAAC,EAAA,CAKH,SAAA,MAAA,QAAAZ,CAAA,GAAAA,EAAA,OAAAW,EAAA,KAAA,CAEO,UAAAP,EAAAF,EAAA,gBAAAA,EAAA,aAAA,EAA8D,SAAAF,EAAA,IAAA,CAAAF,EAAAO,IAE3DP,EAAA,cAAA,eACEG,EAAA,MAAA,CACE,UAAAC,EAAA,WAAuBK,SAAAA,CAAAA,EAAAA,EAAAA,CAChB,KAAA,aAAO,UAAAL,EAAA,OAAgCM,CAAAA,EAAAA,EAAAA,OAAAA,CAC5C,UAAAJ,EAAA,QAAAF,EAAA,UAAA,EAA8C,SAAA,CAAAJ,EAAA,SAAA,IAAAF,CAAA,CAA4B,CAAA,CAAA,CAAQ,EAAA,GAAAE,EAAA,QAAAO,GAAA,EAIxFJ,EAAAY,EAAA,CACO,GAAAf,EAAA,KAAUQ,UAAAA,EAAAA,WAAwBC,OAAAA,SAAkD,MAAAT,EAAA,SAAsBW,SAAAA,CAAAA,EAAAA,EAAAA,CACxG,KAAA,gBAAO,UAAAP,EAAA,OAAmCM,CAAAA,EAAAA,EAAAA,OAAAA,CAC/C,UAAAJ,EAAA,QAAAF,EAAA,UAAA,EAA8C,SAAAJ,EAAA,QAASW,CAAAA,CAAAA,CAAgB,EAAA,GAAAX,EAAA,QAAAO,GAAA,CAFM,CAKhF,CAAA,EAAA,IAGP,CAAA,EAAAM,EAAAC,EAAA,CAIJ,SAAA,MAAA,QAAAb,CAAA,GAAAA,EAAA,OAAAY,EAAA,KAAA,CAEO,UAAAP,EAAAF,EAAA,gBAAAA,EAAA,aAAA,EAA8D,SAAAH,EAAA,IAAA,CAAAD,EAAAO,IAAAJ,EAAAY,EAAA,CAEtD,GAAAf,EAAA,KAAUQ,UAAAA,EAAAA,WAAwBC,OAAAA,SAAkD,MAAAT,EAAA,SAAsBW,SAAAA,CAAAA,EAAAA,EAAAA,CACxG,KAAAX,EAAA,cAAA,WAAA,mBAAA,YAA8D,UAAAI,EAAA,OAA+BM,CAAAA,EAAAA,EAAAA,OAAAA,CAClG,UAAAJ,EAAA,QAAAF,EAAA,UAAA,EAA8C,SAAAJ,EAAA,QAASW,CAAAA,CAAAA,CAAgB,EAAA,GAAAX,EAAA,QAAAO,GAAA,CAAA,CAE1E,CAAA,EAAA,IAGL,CAAA,CAAA,CAED,CAAA,CAIX;;;;;;;;;;"}