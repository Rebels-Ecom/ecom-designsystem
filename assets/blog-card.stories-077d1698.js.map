{"version":3,"file":"blog-card.stories-077d1698.js","sources":["../../src/design-system/components/molecules/blog-card/blog-card.tsx"],"sourcesContent":["import cx from 'classnames'\nimport styles from './blog-card.module.css'\nimport { IPicture } from '../../atoms/picture/picture'\nimport { ILink } from '../../../../types/links'\nimport { UILink } from '../../atoms'\nimport { Picture } from '../../atoms/picture/picture'\nimport { ITag, Tag } from '../../atoms/tag/tag'\nimport { RichTextProps } from '../../../../types/other'\n\nexport interface IBlogCard {\n  image?: IPicture\n  tags?: ITag[]\n  heading?: string\n  text?: string;\n  richText?: React.FC<RichTextProps>;\n  link?: ILink\n  fullWidth?: boolean\n  maxChar?: number;\n}\n\n\nconst BlogCard = ({ image, tags, heading, text, richText, link, fullWidth, maxChar }: IBlogCard) => {\n  const extractContent = (s: string) => {\n    if (typeof document === 'undefined') return;\n\n    const span = document?.createElement('span');\n  \n    if (span) {\n      span.innerHTML = s;\n      return span.textContent || span.innerText;\n    } else {\n      return s;\n    }\n  };\n\n  const extractedRichTextValue = extractContent(text ?? '');\n  const trimmedText = maxChar && (extractedRichTextValue?.length ?? 0) > maxChar ? extractedRichTextValue?.substring(0, maxChar).concat('...') : extractedRichTextValue;\n\n  return (\n    <div className={cx(styles.blogCard, fullWidth && styles.fullWidth)}>\n      {image && (\n        <div className={cx(styles.pictureWrapper, fullWidth && styles.smallHeight)}>\n          <Picture {...image} classNamePicture={styles.picture} classNameImg={styles.image} />\n          {tags?.length && (\n            <div className={styles.tags}>\n              {tags.map((tag, i) => <Tag key={`${tag.text}-${i}`} {...tag} className={styles.tag} />)}\n            </div>\n          )}\n        </div>\n      )}\n      <div className={cx(styles.content, {\n        [styles.centered]: fullWidth,\n        [styles.maxHeight]: !!maxChar,\n      })}>\n        <div className={styles.textContent}>\n          {heading && <h4 className={styles.heading}>{heading}</h4>}\n          {trimmedText && <p className={styles.text} dangerouslySetInnerHTML={{ __html: trimmedText }}></p>}\n          {richText && richText}\n        </div>\n        {link && (\n          <UILink {...link} onSurface={'transparent'} size={'default'} className={styles.link}>\n            {link?.children}\n          </UILink>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport { BlogCard }\n"],"names":["BlogCard","image","tags","heading","text","richText","link","fullWidth","extractedRichTextValue","s","span","trimmedText","maxChar","_jsxs","cx","styles","_jsx","Picture","picture","tag","textContent","UILink","children"],"mappings":"66CAqBAA,EAAA,CAAA,CAAkB,MAAAC,EAAEA,KAAAA,EAAOC,QAAAA,EAAMC,KAAAA,GAASC,SAAAA,EAAMC,KAAAA,EAAUC,UAAAA,EAAMC,QAAAA,CAA8B,IAAA,CAc5F,MAAAC,GAbAC,GAAA,CACE,GAAA,OAAA,SAAA,IAAqC,OAErC,MAAAC,EAAA,+BAAA,cAAA,QAEA,OAAAA,GACEA,EAAAA,UAAAA,EACAA,EAAA,aAAAA,EAAA,WAEAD,CACF,GAGFL,IAAA,EAAA,EACAO,EAAAC,KAAAJ,GAAA,YAAAA,EAAA,SAAA,GAAAI,EAAAJ,GAAA,YAAAA,EAAA,UAAA,EAAAI,GAAA,OAAA,OAAAJ,EAEA,OAAAK,EAAA,MAAA,CACE,UAAAC,EAAAC,EAAA,SAAAR,GAAAQ,EAAA,SAAA,EAAiE,SAAA,CAAAd,GAAAY,EAAA,MAAA,CAE7D,UAAAC,EAAAC,EAAA,eAAAR,GAAAQ,EAAA,WAAA,EAAyE,SAAA,CAAAC,EAAAC,GAAA,CAC/D,GAAAhB,EAAKA,iBAAAA,EAAAA,QAAgCiB,aAAAA,EAAAA,KAA8BjB,CAAAA,GAAAA,GAAAA,YAAAA,EAAAA,SAAAA,EAAAA,MAAAA,CAEzE,UAAAc,EAAA,KAAuBb,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,EAAAA,GAAAA,CACK,GAAAiB,EAA8BA,UAAAA,EAAAA,GAAuBA,EAAAA,GAAAA,EAAAA,QAAAA,GAAAA,CAAAA,CAAO,CAAA,CAAA,CAEzF,CAAA,EAAAN,EAAA,MAAA,CAGL,UAAAC,EAAAC,EAAA,QAAA,CAAmC,CAAAA,EAAA,QAAA,EAAAR,EACdA,CAAAA,EAAAA,SAAAA,EAAAA,CAAAA,CAAAA,CACGK,CAAAA,EACvB,SAAA,CAAAC,EAAA,MAAA,CACC,UAAAE,EAAA,YAAuBK,SAAAA,CAAAA,GAAAA,EAAAA,KAAAA,CACT,UAAAL,EAAA,QAAsBZ,SAAAA,CAAUA,CAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CAC5B,UAAAY,EAAA,KAAqBX,wBAAAA,CAA+B,OAAAO,CAAUA,CAAY,CAAA,EAAAN,GAAAA,CAAA,CACrE,CAAA,EAAAC,GAAAU,EAAAK,GAAA,CAGd,GAAAf,EAAKA,UAAAA,cAAiB,KAAA,UAAqB,UAAAS,EAAA,KAA6BT,SAAAA,GAAAA,YAAAA,EAAAA,QACtEgB,CAAAA,CAAAA,CAEV,CAAA,CAAA,CACG,CAAA,CAGZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}