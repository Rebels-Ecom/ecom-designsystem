{"version":3,"file":"box-wrapper-d01ff822.js","sources":["../../src/design-system/components/molecules/box-wrapper/box-wrapper.tsx"],"sourcesContent":["import React, { useMemo } from 'react'\nimport styles from './box-wrapper.module.css'\nimport cx from 'classnames'\n\nexport type TGroupDirection = 'default' | 'row' | 'column'\nexport type TGroupPosition = 'left' | 'right' | 'center' | 'apart'\nexport type TSpacing = number | 'xs' | 'sm' | 'md' | 'lg' | 'xl'\nexport type TAlign = 'left' | 'right' | 'center' | 'baseline'\n\nexport interface IGroupWrapper {\n  children: React.ReactNode\n  direction?: TGroupDirection\n  position?: TGroupPosition\n  spacing?: TSpacing\n  noWrap?: boolean\n  hasMaxWidth?: boolean\n  withBorder?: boolean\n  align?: TAlign\n  /**\n   * If true, applies an even vertical padding in order to vertically center the button\n   * @default false\n   */\n  onlyButton?: boolean\n  /**\n   * If true, the default margin will be removed\n   * @default false\n   */\n  noMargin?: boolean;\n  /**\n   * Sets the padding prop in rem\n   * Takes either a single number, e.g. 1 or an array of numbers, e.g. [1, 0] or [1, 0, 0, 1] (top, right, bottom, left)\n   * Default is undefined, and therefore decided by styles/css\n   * @default undefined\n  */\n  padding?: Array<number> | number;\n  backgroundColor?: 'light';\n}\n\nfunction BoxWrapper({\n  children,\n  direction = 'default',\n  position = 'left',\n  spacing = 'md',\n  noWrap = true,\n  align = 'left',\n  hasMaxWidth = true,\n  withBorder = true,\n  onlyButton = false,\n  noMargin = false,\n  padding,\n  backgroundColor,\n}: IGroupWrapper) {\n  function getGroupElementsPosition(position: TGroupPosition) {\n    switch (position) {\n      case 'left':\n        return 'leftPosition'\n      case 'right':\n        return 'rightPosition'\n      case 'center':\n        return 'centerPosition'\n      case 'apart':\n      default:\n        return 'apartPosition'\n    }\n  }\n\n  function getGroupElementsAlignment(alignment: TAlign) {\n    switch (alignment) {\n      case 'left':\n        return 'leftAlignment'\n      case 'right':\n        return 'rightAlignment'\n      case 'center':\n        return 'centerAlignment'\n      case 'baseline':\n      default:\n        return 'baselineAlignment'\n    }\n  }\n\n  function getGroupElementsSpacing(spacing: TSpacing) {\n    switch (spacing) {\n      case 'xs':\n        return 'spacing-xs'\n      case 'sm':\n        return 'spacing-sm'\n      case 'md':\n        return 'spacing-md'\n      case 'lg':\n        return 'spacing-lg'\n      case 'xl':\n      default:\n        return 'spacing-xl'\n    }\n  }\n\n  function getGroupElementsDirection(direction: TGroupDirection) {\n    switch (direction) {\n      case 'column':\n        return 'direction-column'\n      case 'row':\n        return 'direction-row'\n      case 'default':\n      default:\n        return 'direction-default'\n    }\n  }\n\n  const paddingValue = useMemo(() => {\n    if (!padding && padding !== 0) {\n      return \"\";\n    }\n\n    if (typeof padding === \"number\") {\n      return `${padding}rem`;\n    }\n\n    return padding.map(p => `${p}rem`).join(' ');\n\n  }, [padding]);\n\n  return (\n    <div\n      className={cx(\n        styles.boxWrapper,\n        styles[getGroupElementsDirection(direction)],\n        styles[getGroupElementsPosition(position)],\n        styles[getGroupElementsAlignment(align)],\n        styles[getGroupElementsSpacing(spacing)],\n        {\n          [styles[backgroundColor ?? '']]: backgroundColor,\n          [styles.hasMaxWidth]: hasMaxWidth,\n          [styles.withBorder]: withBorder,\n          [styles.noWrap]: noWrap,\n          [styles.onlyButton]: onlyButton,\n          [styles.noMargin]: noMargin,\n        }\n      )}\n      style={{ padding: paddingValue}}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport { BoxWrapper }\n"],"names":["BoxWrapper","children","position","spacing","noWrap","align","hasMaxWidth","withBorder","onlyButton","noMargin","padding","getGroupElementsPosition","position2","getGroupElementsAlignment","alignment","getGroupElementsSpacing","spacing2","getGroupElementsDirection","direction2","paddingValue","useMemo","p","_jsx","cx","styles","direction","backgroundColor"],"mappings":"ynCAsCA,SAAAA,EAAA,CAAoB,SAAAC,EAClBA,UAAAA,EAAAA,UACY,SAAAC,EAAA,OACD,QAAAC,EAAA,KACD,OAAAC,EAAA,GACD,MAAAC,EAAA,OACD,YAAAC,EAAA,GACM,WAAAC,EAAA,GACD,WAAAC,EAAA,GACA,SAAAC,EAAA,GACF,QAAAC,EACXA,gBAAAA,CAEa,EAAA,CACb,SAAAC,EAAAC,EAAA,CACE,OAAAA,EAAA,CAAgB,IAAA,OAEZ,MAAA,eAAO,IAAA,QAEP,MAAA,gBAAO,IAAA,SAEP,MAAA,iBAAO,IAAA,QACJ,QAEH,MAAA,eAAO,CACX,CAGF,SAAAC,EAAAC,EAAA,CACE,OAAAA,EAAA,CAAiB,IAAA,OAEb,MAAA,gBAAO,IAAA,QAEP,MAAA,iBAAO,IAAA,SAEP,MAAA,kBAAO,IAAA,WACJ,QAEH,MAAA,mBAAO,CACX,CAGF,SAAAC,EAAAC,EAAA,CACE,OAAAA,EAAA,CAAe,IAAA,KAEX,MAAA,aAAO,IAAA,KAEP,MAAA,aAAO,IAAA,KAEP,MAAA,aAAO,IAAA,KAEP,MAAA,aAAO,IAAA,KACJ,QAEH,MAAA,YAAO,CACX,CAGF,SAAAC,EAAAC,EAAA,CACE,OAAAA,EAAA,CAAiB,IAAA,SAEb,MAAA,mBAAO,IAAA,MAEP,MAAA,gBAAO,IAAA,UACJ,QAEH,MAAA,mBAAO,CACX,CAGF,MAAAC,EAAAC,EAAAA,QAAA,IACE,CAAAV,GAAAA,IAAA,EACE,GAGF,OAAAA,GAAA,SACE,GAAAA,OAGFA,EAAA,IAAAW,GAAA,GAAAA,MAAA,EAAA,KAAA,GAAA,EAA2C,CAAAX,CAAA,CAAA,EAI7C,OAAAY,EAAA,MAAA,CACE,UAAAC,EAAAC,EAAA,WAAAA,EAAAP,EAAAQ,CAAA,CAAA,EAAAD,EAAAb,EAAAT,CAAA,CAAA,EAAAsB,EAAAX,EAAAR,CAAA,CAAA,EAAAmB,EAAAT,EAAAZ,CAAA,CAAA,EAAA,CAOI,CAAAqB,EAAAE,GAAA,EAAA,CAAA,EAAAA,EACmCA,CAAAA,EAAAA,WAAAA,EAAAA,EACXpB,CAAAA,EAAAA,UAAAA,EAAAA,EACDC,CAAAA,EAAAA,MAAAA,EAAAA,EACJH,CAAAA,EAAAA,UAAAA,EAAAA,EACII,CAAAA,EAAAA,QAAAA,EAAAA,CACFC,CAAAA,EAEvB,MAAA,CACO,QAAAU,CAAWA,EAAY,SAAAlB,CAAEA,CAAAA,CAKtC;;"}