{"version":3,"file":"multi-select.stories-8ca62d61.js","sources":["../../src/design-system/components/atoms/multi-select/multi-select.tsx"],"sourcesContent":["import { MouseEventHandler, useRef, useState } from 'react'\nimport styles from './multi-select.module.css'\nimport { Button } from '../button/button'\nimport { IIcon } from '../icon/icon'\nimport { useOnClickOutside } from '../../../hooks'\n\nexport interface IMultiSelect {\n  id?: string\n  name: string\n  options: Array<ISelectOption>\n  selectedOptions: Array<string>\n  onToggleOption: CallableFunction\n  icon?: IIcon\n  disabled?: boolean\n}\n\nexport interface ISelectOption {\n  name: string\n  value: string\n}\n\nconst MultiSelect = (\n  ({ name, options, selectedOptions, onToggleOption, icon, disabled } : IMultiSelect) => {\n    const multiSelectRef = useRef(null);\n    const[isDropdownOpen, setIsDropdownOpen] = useState(false)\n\n    function handleClickOnDropdown() {\n        setIsDropdownOpen(!isDropdownOpen)\n    }\n    \n    const handleClose = () => setIsDropdownOpen(false)\n\n    const handleToggleOption = (option: ISelectOption) => {\n      onToggleOption(option);\n    }\n\n    function isOptionsPopulated() {\n      return options instanceof Array && options.length\n    }\n\n    function getSelectedOptionName(options: Array<ISelectOption>, selectedOptionValue: string) {\n      const selectedOption = options.find(option => option.value===selectedOptionValue);\n      return selectedOption?.name;\n    }\n\n\n    useOnClickOutside({ ref: multiSelectRef, onClose: handleClose })\n\n    return isOptionsPopulated() ? (\n      <div className={styles.multiSelectDropdown} ref={multiSelectRef}>\n        <Button\n          type='button' \n          surface='x'\n          size='xx-small'\n          onClick={handleClickOnDropdown}\n          iconRight={icon}\n          disabled={disabled}\n          className={styles.button}\n        >\n          {(!selectedOptions || selectedOptions.length === 0) ?\n            name :\n            (selectedOptions.length === 1 ?\n              `${name} (${getSelectedOptionName(options, selectedOptions[0])})` :\n              `${name} (${selectedOptions.length} valda)`\n            )\n          }\n        </Button>\n          {isDropdownOpen ? \n            <ul className={styles.multiSelectDropdownOptions}>\n              {options.map(option => {\n                const isSelected = selectedOptions && selectedOptions.some(item=>item===option.value)\n                \n                return (\n                  <li key={option.value} className={styles.multiSelectDropdownOption}>\n                    <input type=\"checkbox\" checked={isSelected} onChange={() => handleToggleOption(option)} className={styles.multiSelectDropdownOptionCheckbox}></input>\n                    <span>{option.name}</span>\n                  </li>\n                )\n              })}\n            </ul> : null}\n      </div>\n    ) : null\n  }\n)\n\nexport { MultiSelect }\n"],"names":["MultiSelect","name","options","selectedOptions","onToggleOption","icon","multiSelectRef","useRef","isDropdownOpen","setIsDropdownOpen","useState","handleClickOnDropdown","handleClose","handleToggleOption","option","isOptionsPopulated","length","getSelectedOptionName","options2","selectedOptionValue","selectedOption","useOnClickOutside","_jsxs","styles","multiSelectDropdown","disabled","button","multiSelectDropdownOptions","isSelected","item","multiSelectDropdownOption","multiSelectDropdownOptionCheckbox"],"mappings":"sfAqBAA,EAAA,CAAA,CACG,KAAAC,EAAEA,QAAAA,EAAMC,gBAAAA,EAASC,eAAAA,EAAiBC,KAAAA,EAAgBC,SAAAA,CAA8B,IAAA,CAC/E,MAAAC,EAAAC,SAAA,IAAA,EACA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,EAAA,EAEA,SAAAC,GAAA,CACIF,EAAAA,CAAAA,CAAAA,CAAiC,CAGrC,MAAAG,EAAA,IAAAH,EAAA,EAAA,EAEAI,EAAAC,GAAA,CACEV,EAAAA,CAAAA,CAAqB,EAGvB,SAAAW,GAAA,CACE,OAAAb,aAAA,OAAAA,EAAA,MAA2Cc,CAG7C,SAAAC,EAAAC,EAAAC,EAAA,CACE,MAAAC,EAAAF,EAAA,KAAAJ,GAAAA,EAAA,QAAAK,CAAA,EACA,OAAAC,GAAA,YAAAA,EAAA,IAAuBnB,CAIzBoB,OAAAA,EAAAA,CAAkB,IAAAf,EAAOA,QAAAA,CAAyBM,CAAAA,EAElDG,EAAA,EAAAO,EAAA,MAAA,CACE,UAAAC,EAAA,oBAAuBC,IAAAA,EAA0BlB,SAAAA,CAAAA,EAAAA,EAAAA,CACxC,KAAA,SACA,QAAA,IACG,KAAA,WACH,QAAAK,EACIA,UAAAA,EACEN,SAAAA,EACXoB,UAAAA,EAAAA,OACkBC,SAAAA,CAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,SAAAA,EAAAA,GAAAA,MAAAA,EAAAA,EAAAA,EAAAA,CAAAA,CAAAA,KAAAA,GAAAA,MAAAA,EAAAA,eAMcV,CAAAA,EAAAA,EAAAA,EAAAA,KAAAA,CAK9B,UAAAO,EAAA,2BAAsBI,SAAAA,EAAAA,IAAAA,GAAAA,CAElB,MAAAC,EAAAzB,GAAAA,EAAA,KAAA0B,GAAAA,IAAAf,EAAA,KAAA,EAEA,OAAAQ,EAAA,KAAA,CACE,UAAAC,EAAA,0BAAyCO,SAAAA,CAAAA,EAAAA,QAAAA,CACvC,KAAA,WAAY,QAAAF,EAAoBA,SAAAA,IAAAA,EAAAA,CAAAA,EAAqD,UAAAL,EAAA,iCAAqBQ,CAAAA,EAAAA,EAAAA,OAAAA,CAC1G,SAAAjB,EAAA,IAAcb,CAAAA,CAAAA,CAAY,EAAAa,EAAA,KAAA,CACxB,CAAA,CAEP,CAAA,EAAA,IAAA,CACS,CAAA,EAAA,IAGtB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}