{"version":3,"file":"table.stories-7005f962.js","sources":["../../src/design-system/components/molecules/table/table.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Heading, Loader } from '../../atoms';\nimport { IconButton, TIconButton } from '../../atoms/icon-button/icon-button';\nimport styles from './table.module.css'\nimport cx from 'classnames'\nimport { Button, IButton } from '../../atoms/button/button';\n\ntype TListItem = {[key: string]: string | TIconButton};\ntype TListItems = Array<TListItem>;\n\nexport interface ITable {\n  listItems: TListItems\n  /**\n   * If true, no column titles will be display\n   * @default false\n   */\n  hideColumnTitles?: boolean;\n  /**\n   * If true, each column will get equal width\n   * @default false\n   */\n  equalWidthColumns?: boolean;\n  /**\n   * Adds a gap (in rem) between the columns\n   * @default 0\n   */\n  listGap?: number;\n  /**\n   * What column title to sort by initially\n   * @default 'first column title'\n   */\n  initialSortBy?: string;\n  /**\n   * loading contacts indicator\n   * @default undefined\n  */\n  loading?: boolean;\n  /**\n   * Title to display on top of table\n   * @default undefined\n   */\n  title?: string;\n  action?: IButton;\n}\n\nconst Table = ({\n  listItems,\n  hideColumnTitles = false,\n  equalWidthColumns = false,\n  listGap = 0,\n  loading,\n  initialSortBy,\n  title,\n  action\n}: ITable) => {\n  const [sortBy, setSortBy] = useState<{ by: string, dir: 'asc' | 'desc'}>();\n  const listItem = listItems?.sort((a,b) => Object.keys(b).length - Object.keys(a).length)[0];\n  const columnTitles = listItems.length ? Object.keys(listItem) : []\n\n  useEffect(() => {\n    setSortBy({ by: initialSortBy ?? columnTitles[0], dir: 'asc' })\n  }, [])\n\n  const handleSort = (a: TListItem,b: TListItem) => {\n    if (sortBy?.dir === 'asc') {\n      return a[sortBy?.by ?? columnTitles[0]] > b[sortBy?.by ?? columnTitles[0]] ? 1 : -1\n    }\n    if (sortBy?.dir === 'desc') {\n      return a[sortBy?.by ?? columnTitles[0]] > b[sortBy?.by ?? columnTitles[0]] ? -1 : 1\n    }\n\n    return 0\n  }\n  \n  const renderIcon = (obj: TIconButton, i: string) => {\n    return <IconButton key={i} {...obj} size='medium' noPadding isTransparent noBorder />\n  }\n  \n  const renderList = (columnTitle: string) => {\n    return listItems.sort((a: TListItem,b: TListItem) => handleSort(a,b)).map((item, i) => {\n      return typeof item[columnTitle] === 'object' ? <div key={`${item[columnTitle]}-${i}`} className={cx(styles.item, styles.icon)}>{renderIcon(item[columnTitle] as TIconButton, i.toString())}</div> : <span key={`${item[columnTitle]}-${i}`} className={styles.item}>{item[columnTitle]}</span>\n    })\n  }\n  \n  const style: { [key: string]: string } = ({\n    '--list-gap': `${listGap}rem`,\n  })\n\n  return loading ? <Loader visible size='md' /> : (\n    <div className={styles.table} style={style}>\n      <div className={styles.top}>\n        {title && <Heading order={5} children={title} />}\n        {action && <Button {...action} />}\n      </div>\n      <div className={styles.mobile}>\n        {listItems.map((item, i) => {\n          const entries = Object.entries(item);\n          const nonIcons = entries?.filter(([key]) => !key.includes('icon'))\n          const icons = entries?.filter(([key]) => key.includes('icon'));\n          return (\n            <div key={i} className={styles.group}>\n              {nonIcons?.length ? nonIcons.map(([key, value]) => (\n                <div key={`${key}-${i}`} className={styles.row}>\n                {!hideColumnTitles && !key.includes('icon') ? <span className={styles.columnTitle}>{`${key}: `}</span> : ''}\n                <span className={styles.item}>{typeof value === 'object' ? renderIcon(value, `${key}-${i}`) : value}</span></div>\n              )) : null}\n              {icons?.length ? <div className={styles.icons}>\n                {icons.map(([key, value]) => typeof value === 'object' && renderIcon(value, `${key}-${i}`))}\n              </div> : null}\n            </div>\n          )\n        })}\n      </div>\n\n      <div className={styles.desktop}>\n        {columnTitles?.map((columnTitle, i) => {\n          const noIcons = columnTitles?.filter(col => !col.includes('icon'))\n          return (\n            <div key={`${columnTitle}-${i}`} className={cx(styles.column, {\n              [styles.equalWidthColumn]: equalWidthColumns,\n              [styles.textColumn]: !columnTitle.includes('icon'),\n              [styles.iconColumn]: columnTitle.includes('icon'),\n              [styles.lastTextColumn]: noIcons[noIcons?.length - 1] === columnTitle\n            })}\n            >\n              {!hideColumnTitles && (\n                <span\n                  className={cx(styles.item, styles.columnTitle, {[styles.icon]: columnTitle.includes('icon')})}\n                >\n                  {!columnTitle.includes('icon') && (\n                    <>\n                      {columnTitle}\n                      <IconButton\n                        icon={sortBy?.by === columnTitle && sortBy?.dir === 'asc' ? 'icon-chevron-down' : 'icon-chevron-up'}\n                        type='button'\n                        onClick={() => setSortBy({ by: columnTitle, dir: sortBy?.by === columnTitle && sortBy?.dir === 'asc' ? 'desc' : 'asc'})}\n                        isTransparent\n                        noBorder\n                      />\n                    </>\n                  )}\n                </span>\n              )}\n              {renderList(columnTitle)}\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport {\n  Table\n}"],"names":["Table","listItems","equalWidthColumns","listGap","loading","initialSortBy","title","sortBy","setSortBy","useState","listItem","a","b","columnTitles","useEffect","handleSort","renderIcon","obj","i","_jsx","IconButton","renderList","columnTitle","item","cx","styles","style","Loader","_jsxs","table","top","action","mobile","entries","nonIcons","key","icons","group","row","value","desktop","noIcons","col","hideColumnTitles","_Fragment"],"mappings":"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"}