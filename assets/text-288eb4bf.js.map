{"version":3,"file":"text-288eb4bf.js","sources":["../../src/design-system/components/atoms/text/text.tsx"],"sourcesContent":["import React from 'react'\nimport styles from './text.module.css'\nimport cx from 'classnames'\n\nexport type TTextAlignment = 'left' | 'center' | 'right'\nexport type TTextWeight = 'normal' | 'bold'\nexport type TTextSize = 'regular' | 'small'\nexport type TComponentType = 'a' | 'span'\n\nexport interface IText {\n  children: React.ReactNode\n  componentType?: TComponentType\n  href?: string\n  align?: TTextAlignment\n  underline?: boolean\n  borderBottom?: boolean\n  weight?: TTextWeight\n  size?: TTextSize\n  className?: string\n  upperCase?: boolean;\n  color?: 'error'; // TODO: add more options if needed\n}\n\nfunction Text({\n  children,\n  align = 'left',\n  componentType,\n  href,\n  underline = false,\n  borderBottom = false,\n  weight,\n  size = 'regular',\n  className = '',\n  upperCase,\n  color\n}: IText) {\n  function getTextAlignment(alignment: TTextAlignment) {\n    switch (alignment) {\n      case 'left':\n        return 'leftAlignment'\n      case 'right':\n        return 'rightAlignment'\n      case 'center':\n      default:\n        return 'centerAlignment'\n    }\n  }\n\n  if (componentType === 'a' && href !== '')\n    return (\n      <a\n        href={href}\n        className={cx(\n          styles.text,\n          styles.linkText,\n          'p',\n          styles[getTextAlignment(align)],\n          {\n            [styles.textBold]: weight === 'bold',\n            [styles.textUnderlined]: underline,\n            [styles.textWithBottomBorder]: borderBottom,\n            [styles[color ?? '']]: color\n          },\n          className\n        )}\n      >\n        {children}\n      </a>\n    )\n  return (\n    <span\n      className={cx(\n        styles.text,\n        'p',\n        styles[getTextAlignment(align)],\n        size === 'small' ? 'bodyS' : 'body',\n        className,\n        {\n          [styles.textBold]: weight === 'bold',\n          [styles.textUnderlined]: underline,\n          [styles.textWithBottomBorder]: borderBottom,\n          [styles.upperCase]: upperCase,\n          [styles[color ?? '']]: color\n        }\n      )}\n    >\n      {children}\n    </span>\n  )\n}\n\nexport { Text }\n"],"names":["Text","children","componentType","href","borderBottom","weight","className","upperCase","getTextAlignment","alignment","_jsx","styles","underline","color","cx","align","size"],"mappings":"weAuBA,SAAAA,EAAA,CAAc,SAAAC,EACZA,MAAAA,EAAAA,OACQ,cAAAC,EACRA,KAAAA,EACAC,UAAAA,EAAAA,GACY,aAAAC,EAAA,GACG,OAAAC,EACfA,KAAAA,EAAAA,UACO,UAAAC,EAAA,GACK,UAAAC,EACZA,MAAAA,CAEK,EAAA,CACL,SAAAC,EAAAC,EAAA,CACE,OAAAA,EAAA,CAAiB,IAAA,OAEb,MAAA,gBAAO,IAAA,QAEP,MAAA,iBAAO,IAAA,SACJ,QAEH,MAAA,iBAAO,CACX,CAGF,OAAAP,IAAA,KAAAC,IAAA,GACEO,EAAA,IAAA,CACE,KAAAP,EACEA,UAAAA,EAAAA,EAAAA,KAAAA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAME,CAAAQ,EAAA,QAAA,EAAAN,IAAA,OACgC,CAAAM,EAAA,cAAA,EAAAC,EACLA,CAAAA,EAAAA,oBAAAA,EAAAA,EACMR,CAAAA,EAAAA,GAAAA,EAAAA,CAAAA,EAAAA,CACRS,EAAAA,CAAAA,EAG3B,SAAAZ,CAAEA,CAAAA,EAKRS,EAAA,OAAA,CACE,UAAAI,EAAAH,EAAA,KAAA,IAAAA,EAAAH,EAAAO,CAAA,CAAA,EAAAC,IAAA,QAAA,QAAA,OAAAV,EAAA,CAOI,CAAAK,EAAA,QAAA,EAAAN,IAAA,OACgC,CAAAM,EAAA,cAAA,EAAAC,EACLA,CAAAA,EAAAA,oBAAAA,EAAAA,EACMR,CAAAA,EAAAA,SAAAA,EAAAA,EACXG,CAAAA,EAAAA,GAAAA,EAAAA,CAAAA,EAAAA,CACGM,CAAAA,EAE3B,SAAAZ,CAAEA,CAAAA,CAKR"}