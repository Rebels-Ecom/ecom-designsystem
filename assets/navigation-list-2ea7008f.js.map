{"version":3,"file":"navigation-list-2ea7008f.js","sources":["../../src/design-system/components/molecules/sub-navigation/sub-navigation.tsx","../../src/design-system/components/molecules/navigation-list/navigation-list.tsx"],"sourcesContent":["import React from 'react'\nimport styles from './sub-navigation.module.css'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { INavigationLink} from '../../../../types/links'\nimport { NavigationList } from '../navigation-list/navigation-list'\nimport { Icon } from '../../atoms/icon/icon'\nimport cx from 'classnames'\n\nconst variants = {\n    open: {\n      transition: { staggerChildren: 0.03, delayChildren: 0.2 },\n    },\n    closed: {\n      transition: { staggerChildren: 0.05, staggerDirection: -1 },\n    },\n}\n  \nconst itemVariants = {\n    open: {\n        y: 0,\n        opacity: 1,\n        transition: {\n        y: { stiffness: 1000, velocity: -100 },\n        },\n        duration: 0.2,\n    },\n    closed: {\n        y: 50,\n        opacity: 0,\n        transition: {\n        y: { stiffness: 1000 },\n        },\n    },\n}\n\nexport interface ISubNavigation {\n    navLink: INavigationLink\n    subNavLinks: Array<INavigationLink>\n    isOpen: boolean\n    exitSubNav: ()=> void\n    isMobile?: boolean\n    linkComponent?: any\n}\n\nfunction SubNavigation({navLink, subNavLinks, linkComponent: Link, isOpen, exitSubNav, isMobile}: ISubNavigation) {\n    return (\n        <>\n            { isMobile \n                ? \n                <div className={cx(styles.subNavDropdownMobile, isOpen ? styles.isVisible : '')}>\n                    <div className={styles.linkList}>\n                        <div className={styles.subNavHeading}>\n                            <button className={styles.subNavBackBtn} onClick={exitSubNav}>\n                                <Icon icon={'icon-chevron-left'} className={styles.subNavBackArrow}></Icon>\n                                {navLink?.title?.toUpperCase()}\n                            </button>\n                            {navLink.isExternal \n                                ? \n                                <a href={navLink.href} onClick={exitSubNav} target={navLink.target} className={cx('bodyS', styles.subNavShowAllBtn)}>\n                                    {navLink.subNavBtnLabel ? navLink.subNavBtnLabel : 'Visa alla sorter'}\n                                </a>\n                                : \n                                <Link field={navLink} onClick={exitSubNav} target={navLink.target} className={cx('bodyS', styles.subNavShowAllBtn)}>\n                                    {navLink.subNavBtnLabel ? navLink.subNavBtnLabel : 'Visa alla sorter'}\n                                </Link>\n                            }\n                        </div>\n                        <NavigationList links={subNavLinks} linkComponent={Link} mobile isOpen={isOpen} />\n                    </div>\n                </div>\n                :\n                <div className={cx(styles.subNavDropdownDesktop, isOpen ? styles.isVisible : '')}>\n                    <AnimatePresence>\n                        { isOpen && \n                            <motion.ul className={cx(styles.subNavList)} variants={variants} exit=\"closed\" initial=\"closed\" animate=\"open\">\n                                {subNavLinks.map((link: INavigationLink, index: number)=>(\n                                    <motion.li key={index} className={styles.subNavItemWrapper} variants={itemVariants}>\n                                        <div className={styles.listItem}>\n                                            { link.isExternal \n                                                ? \n                                                <a href={link.href} onClick={exitSubNav} target={link.target} title={link.title}>\n                                                    {link.title?.toUpperCase()}\n                                                </a>\n                                                : \n                                                <Link field={link} onClick={exitSubNav} target={link.target} title={link.title} activeClassName={styles.active}>\n                                                    {link.title?.toUpperCase()}\n                                                </Link>\n                                            }\n                                        </div>\n                                    </motion.li>\n                                ))} \n                            </motion.ul>\n                        }\n                    </AnimatePresence>\n                </div>   \n            }\n        </>  \n    )\n}\n\nexport { SubNavigation }\n\n","\nimport React, { useEffect, useState } from 'react'\nimport styles from './navigation-list.module.css'\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { INavigationLink } from '../../../../types/links'\nimport { Icon } from '../../atoms/icon/icon'\nimport { SubNavigation } from '../sub-navigation/sub-navigation'\n\nexport interface INavigationList {\n    links: Array<INavigationLink>\n    linkComponent: any\n    mobile?: boolean\n    isOpen: boolean\n}\n\nconst variants = {\n    open: {\n      transition: { staggerChildren: 0.03, delayChildren: 0.2 },\n    },\n    closed: {\n      transition: { staggerChildren: 0.05, staggerDirection: -1 },\n    },\n}\n  \nconst itemVariants = {\n    open: {\n        y: 0,\n        opacity: 1,\n        transition: {\n        y: { stiffness: 1000, velocity: -100 },\n        },\n        duration: 0.2,\n    },\n    closed: {\n        y: 50,\n        opacity: 0,\n        transition: {\n        y: { stiffness: 1000 },\n        },\n    },\n}\n\nfunction DesktopNavLink({link, linkComponent: Link }:{link:INavigationLink, linkComponent: any}){\n    const[showSubNavigation, setShowSubNavigation] = useState <boolean>(false)\n    function closeSubNav(){\n        setShowSubNavigation(false)\n    }\n    return (\n        <div className={styles.navItemDesktop} onMouseOver={() => setShowSubNavigation(true)} onMouseLeave={() => setShowSubNavigation(false)}>\n            {link.isExternal \n            ? \n                <a href={link.href} onClick={closeSubNav} target={link.target} title={link.title} className={styles.linkDesktop} aria-expanded={showSubNavigation ? \"true\" : \"false\"}>\n                    {link.title}\n                </a>\n            : \n                <Link field={link} onClick={closeSubNav} target={link.target} title={link.title} activeClassName={styles.active} className={styles.linkDesktop} aria-expanded={showSubNavigation ? \"true\" : \"false\"}>\n                    {link.title}\n                </Link>\n            }\n            {link?.hasChildren && link?.subNavigationLinks && link?.subNavigationLinks?.length>0 && \n                <SubNavigation navLink={link} subNavLinks={link.subNavigationLinks} linkComponent={Link} isOpen={showSubNavigation} isMobile={false} exitSubNav={closeSubNav}/>}\n        </div>\n    )\n}\n\n\nfunction NavigationList({ links = [], linkComponent: Link, mobile, isOpen }: INavigationList) {\n\n    const[showSubNavigation, setShowSubNavigation] = useState <boolean>(false)\n    const[subNavLink, setSubNavLink] = useState <INavigationLink>()\n\n    useEffect(()=>{\n        !isOpen && setShowSubNavigation(false)\n    }, [isOpen])\n  \n    function openSubNavMenu(link: INavigationLink){\n      setSubNavLink(link)\n      setShowSubNavigation(true)\n    }\n  \n    function exitSubNavMenu(){\n      setShowSubNavigation(false)\n    }\n  \n    if(mobile && isOpen && showSubNavigation && subNavLink?.subNavigationLinks?.length){\n        return(\n            <SubNavigation \n                navLink={subNavLink} \n                subNavLinks={subNavLink.subNavigationLinks} \n                linkComponent={Link} \n                isOpen={showSubNavigation}\n                exitSubNav={exitSubNavMenu} \n                isMobile={true}\n            />\n        )\n    }\n  \n    return (\n        <AnimatePresence>\n            { isOpen && (\n                <motion.ul className={styles.linkList} variants={variants} exit=\"closed\" initial=\"closed\" animate=\"open\">\n                    {links.map((link: INavigationLink, index) => {\n                        if(mobile){\n                            return(\n                                <motion.li key={index} className={styles.navItemMobile} variants={itemVariants}>\n                                    {link.hasChildren && link.subNavigationLinks && link.subNavigationLinks.length>0\n                                        ?\n                                        <button className={styles.linkMobile} onClick={()=>openSubNavMenu(link)}>\n                                            {link.title?.toUpperCase()}\n                                            <Icon icon={'icon-chevron-right'}></Icon>\n                                        </button>\n                                        :\n                                        <>\n                                            {link.isExternal \n                                            ? \n                                                <a href={link.href} onClick={exitSubNavMenu} target={link.target} title={link.title} className={styles.linkMobile} aria-expanded={showSubNavigation ? \"true\" : \"false\"}>\n                                                    {link.title?.toUpperCase()}\n                                                </a>\n                                            : \n                                                <Link field={link} onClick={exitSubNavMenu} target={link.target} title={link.title} activeClassName={styles.active} className={styles.linkMobile} aria-expanded={showSubNavigation ? \"true\" : \"false\"}>\n                                                    {link.title?.toUpperCase()}\n                                                </Link>\n                                            }\n                                        </>\n                                    }\n                                    {link.hasChildren && link?.subNavigationLinks && <SubNavigation navLink={link} subNavLinks={link.subNavigationLinks} linkComponent={Link} isOpen={showSubNavigation} exitSubNav={exitSubNavMenu} isMobile={true}/>}\n                                </motion.li>\n                            )\n                        }\n                        return (\n                            <DesktopNavLink key={index} link={link} linkComponent={Link}></DesktopNavLink>\n                        )\n                    })}\n                </motion.ul>\n            )}\n      </AnimatePresence>\n    )\n}\n\nexport { NavigationList }\n\n"],"names":["variants","itemVariants","SubNavigation","navLink","subNavLinks","Link","isOpen","exitSubNav","_jsx","_Fragment","isMobile","cx","styles","_jsxs","linkList","subNavHeading","subNavBackBtn","subNavBackArrow","href","target","NavigationList","AnimatePresence","motion","link","index","subNavItemWrapper","listItem","title","active","DesktopNavLink","showSubNavigation","setShowSubNavigation","useState","closeSubNav","navItemDesktop","linkDesktop","subNavigationLinks","links","mobile","subNavLink","setSubNavLink","useEffect","openSubNavMenu","exitSubNavMenu","_a","navItemMobile","linkMobile","Icon","_b","_c"],"mappings":"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"}