{"version":3,"file":"checkbox-group.stories-094059c2.js","sources":["../../src/design-system/components/molecules/checkbox-group/checkbox-group.tsx","../../src/design-system/components/molecules/checkbox-group/checkbox-group.stories.tsx"],"sourcesContent":["import cx from 'classnames'\r\nimport { Checkbox, ICheckbox } from '../../atoms/inputs/checkbox/checkbox'\r\nimport styles from './checkbox-group.module.css'\r\n\r\nexport type TypeInputs = {\r\n  label: string\r\n} & ICheckbox\r\n\r\ntype TAlign = 'horizontal' | 'vertical'\r\n\r\nexport interface ICheckboxGroup {\r\n  className?: string\r\n  classNameList?: string\r\n  classNameListItem?: string\r\n  classNameLabel?: string\r\n  classNameCheckbox?: string\r\n  classNameCheckboxWrapper?: string\r\n  inputs: Array<TypeInputs>\r\n  align?: TAlign\r\n}\r\n\r\nconst CheckboxGroup = ({\r\n  className,\r\n  classNameList,\r\n  classNameListItem,\r\n  classNameLabel,\r\n  classNameCheckbox,\r\n  classNameCheckboxWrapper,\r\n  inputs = [],\r\n  align = 'horizontal',\r\n}: ICheckboxGroup) => {\r\n  return (\r\n    <div className={cx(className)}>\r\n      <ul className={cx(classNameList ? classNameList : `${styles.defaultStyleList} ${styles[align]}`)}>\r\n        {inputs.map((input) => (\r\n          <li key={input.id} className={cx(classNameListItem ? classNameListItem : styles.defaultStyleListItem)}>\r\n            <div className={cx(classNameCheckboxWrapper ? classNameCheckboxWrapper : styles.defaultStyleCheckboxWrapper)}>\r\n              <Checkbox {...input} className={cx(classNameCheckbox ? classNameCheckbox : styles.defaultStyleCheckbox)} />\r\n              <label className={cx('body', classNameLabel ? classNameLabel : styles.defaultStyleLabel, input.disabled && styles.disabled)} htmlFor={input.id}>\r\n                {input.label}\r\n              </label>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { CheckboxGroup }\r\n","import React from 'react';\nimport { ComponentStory, ComponentMeta } from '@storybook/react';\nimport { useState } from 'react';\nimport { CheckboxGroup, TypeInputs } from './checkbox-group';\nimport { CheckboxStory } from '../../atoms/inputs/checkbox/checkbox.stories';\nexport default ({\n  title: 'Design System/Molecules/CheckboxGroup',\n  component: CheckboxGroup\n} as ComponentMeta<typeof CheckboxGroup>);\nconst Template: ComponentStory<typeof CheckboxGroup> = args => {\n  const [checkboxes, setCheckboxes] = useState<Array<TypeInputs>>(args.inputs.map((checkbox: any) => {\n    return {\n      ...checkbox,\n      onChange: onChangeCheckbox\n    };\n  }));\n  function onChangeCheckbox(e: React.FormEvent<HTMLInputElement>) {\n    const value = e.currentTarget.value;\n    const checked = e.currentTarget.checked;\n    setCheckboxes((prevCheckboxes: Array<TypeInputs>) => {\n      return prevCheckboxes.map((checkbox: TypeInputs) => {\n        return {\n          ...checkbox,\n          checked: checkbox.value === value ? checked : checkbox.checked\n        };\n      });\n    });\n  }\n  return <>\n      <div style={{\n      margin: '0 0 2rem 0',\n      maxWidth: '616px'\n    }}>\n        <CheckboxGroup {...args} inputs={checkboxes} />\n      </div>\n    </>;\n};\nconst inputs = [{\n  ...CheckboxStory.args,\n  label: 'Liten popcorn'\n}, {\n  ...CheckboxStory.args,\n  id: `${CheckboxStory.args.id}_2`,\n  value: `${CheckboxStory.args.value}_2`,\n  checked: false,\n  label: 'Mellan popcorn'\n}, {\n  ...CheckboxStory.args,\n  id: `${CheckboxStory.args.id}_3`,\n  value: `${CheckboxStory.args.value}_3`,\n  checked: false,\n  label: 'Stor popcorn'\n}];\nexport const CheckboxGroupStory = Template.bind({});\nCheckboxGroupStory.storyName = 'Checkbox Group';\nCheckboxGroupStory.args = {\n  align: 'horizontal',\n  inputs: inputs\n};\nexport const CheckboxGroupStoryError = Template.bind({});\nCheckboxGroupStoryError.storyName = 'Checkbox Group Error';\nCheckboxGroupStoryError.args = {\n  align: 'horizontal',\n  inputs: inputs.map((input: any) => {\n    return {\n      ...input,\n      validation: {\n        state: 'error'\n      }\n    };\n  })\n};\nexport const CheckboxGroupStoryDisabled = Template.bind({});\nCheckboxGroupStoryDisabled.storyName = 'Checkbox Group Disabled';\nCheckboxGroupStoryDisabled.args = {\n  label: 'VÃ¤lj popkornstorlek',\n  align: 'horizontal',\n  inputs: inputs.map((input: any) => {\n    return {\n      ...input,\n      disabled: true\n    };\n  })\n};\nCheckboxGroupStory.parameters = {\n  ...CheckboxGroupStory.parameters,\n  docs: {\n    ...CheckboxGroupStory.parameters?.docs,\n    source: {\n      originalSource: \"args => {\\n  const [checkboxes, setCheckboxes] = useState<Array<TypeInputs>>(args.inputs.map((checkbox: any) => {\\n    return {\\n      ...checkbox,\\n      onChange: onChangeCheckbox\\n    };\\n  }));\\n  function onChangeCheckbox(e: React.FormEvent<HTMLInputElement>) {\\n    const value = e.currentTarget.value;\\n    const checked = e.currentTarget.checked;\\n    setCheckboxes((prevCheckboxes: Array<TypeInputs>) => {\\n      return prevCheckboxes.map((checkbox: TypeInputs) => {\\n        return {\\n          ...checkbox,\\n          checked: checkbox.value === value ? checked : checkbox.checked\\n        };\\n      });\\n    });\\n  }\\n  return <>\\n      <div style={{\\n      margin: '0 0 2rem 0',\\n      maxWidth: '616px'\\n    }}>\\n        <CheckboxGroup {...args} inputs={checkboxes} />\\n      </div>\\n    </>;\\n}\",\n      ...CheckboxGroupStory.parameters?.docs?.source\n    }\n  }\n};\nCheckboxGroupStoryError.parameters = {\n  ...CheckboxGroupStoryError.parameters,\n  docs: {\n    ...CheckboxGroupStoryError.parameters?.docs,\n    source: {\n      originalSource: \"args => {\\n  const [checkboxes, setCheckboxes] = useState<Array<TypeInputs>>(args.inputs.map((checkbox: any) => {\\n    return {\\n      ...checkbox,\\n      onChange: onChangeCheckbox\\n    };\\n  }));\\n  function onChangeCheckbox(e: React.FormEvent<HTMLInputElement>) {\\n    const value = e.currentTarget.value;\\n    const checked = e.currentTarget.checked;\\n    setCheckboxes((prevCheckboxes: Array<TypeInputs>) => {\\n      return prevCheckboxes.map((checkbox: TypeInputs) => {\\n        return {\\n          ...checkbox,\\n          checked: checkbox.value === value ? checked : checkbox.checked\\n        };\\n      });\\n    });\\n  }\\n  return <>\\n      <div style={{\\n      margin: '0 0 2rem 0',\\n      maxWidth: '616px'\\n    }}>\\n        <CheckboxGroup {...args} inputs={checkboxes} />\\n      </div>\\n    </>;\\n}\",\n      ...CheckboxGroupStoryError.parameters?.docs?.source\n    }\n  }\n};\nCheckboxGroupStoryDisabled.parameters = {\n  ...CheckboxGroupStoryDisabled.parameters,\n  docs: {\n    ...CheckboxGroupStoryDisabled.parameters?.docs,\n    source: {\n      originalSource: \"args => {\\n  const [checkboxes, setCheckboxes] = useState<Array<TypeInputs>>(args.inputs.map((checkbox: any) => {\\n    return {\\n      ...checkbox,\\n      onChange: onChangeCheckbox\\n    };\\n  }));\\n  function onChangeCheckbox(e: React.FormEvent<HTMLInputElement>) {\\n    const value = e.currentTarget.value;\\n    const checked = e.currentTarget.checked;\\n    setCheckboxes((prevCheckboxes: Array<TypeInputs>) => {\\n      return prevCheckboxes.map((checkbox: TypeInputs) => {\\n        return {\\n          ...checkbox,\\n          checked: checkbox.value === value ? checked : checkbox.checked\\n        };\\n      });\\n    });\\n  }\\n  return <>\\n      <div style={{\\n      margin: '0 0 2rem 0',\\n      maxWidth: '616px'\\n    }}>\\n        <CheckboxGroup {...args} inputs={checkboxes} />\\n      </div>\\n    </>;\\n}\",\n      ...CheckboxGroupStoryDisabled.parameters?.docs?.source\n    }\n  }\n};"],"names":["CheckboxGroup","className","classNameList","classNameListItem","classNameLabel","classNameCheckbox","classNameCheckboxWrapper","align","_jsx","cx","styles","inputs","input","_jsxs","Checkbox","id","label","checkboxGroup_stories","title","component","Template","args","checkboxes","setCheckboxes","useState","map","checkbox","onChange","onChangeCheckbox","e","value","currentTarget","checked","prevCheckboxes","_Fragment","children","style","margin","maxWidth","CheckboxStory","CheckboxGroupStory","bind","storyName","CheckboxGroupStoryError","validation","state","CheckboxGroupStoryDisabled","disabled","parameters","docs","source","originalSource"],"mappings":"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"}